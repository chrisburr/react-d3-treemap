{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/App/App.tsx","webpack:///./src/components/Tooltip/TooltipContext.tsx","webpack:///./src/components/Node/helpers.ts","webpack:///./src/components/Node/NumberOfChildren/NumberOfChildren.tsx","webpack:///./src/components/Tooltip/useTooltip.ts","webpack:///./src/components/Tooltip/Tooltip.tsx","webpack:///./src/components/Node/LabelNewLine/LabelNewLine.tsx","webpack:///./src/components/Node/Node.tsx","webpack:///./src/components/Node/index.ts","webpack:///./src/data/data.1.level.ts","webpack:///./src/components/TreeMap/ITreeMapProps.ts","webpack:///./src/components/Breadcrumb/Breadcrumb.tsx","webpack:///./src/utils/Utils.ts","webpack:///./src/components/Tooltip/TooltipContainer.tsx","webpack:///./src/components/Tooltip/TooltipProvider.tsx","webpack:///./src/components/TreeMap/TreeMap.tsx","webpack:///./src/components/TreeMap/index.ts"],"names":["App","props","state","data","data2","treeMapRef","React","componentDidMount","console","log","this","current","render","width","height","ref","id","className","nodeClassName","valueFn","value","toString","charAt","levelsToDisplay","paddingInner","onZoom","level","items","onTreeMapDidMount","treeMap","getZoomLevel","nodeStyle","fontSize","paddingTop","paddingLeft","paddingRight","numberOfChildrenPlacement","NumberOfChildrenPlacement","TopRight","customD3ColorScale","scaleSequential","chromatic","colorModel","ColorModel","OneEachChildren","darkNodeBorderColor","darkNodeTextColor","lightNodeBorderColor","lightNodeTextColor","onClick","setState","resetZoom","zoomOut","hot","module","defaultValues","showTooltip","Error","hideTooltip","disableTooltip","TooltipContext","canvas","useTooltip","Tooltip","label","tooltipClassName","undefined","getTextDimensions","text","style","fontVariant","fontWeight","fontFamily","document","createElement","context","getContext","Number","font","measureText","charWidthCache","getNumberItemsWidthByNumberOfChars","numberOfChars","NumberOfChildren","customId","textColor","nodeTotalNodes","isSelectedNode","placement","realPlacement","itemsWidth","length","itemsHeight","strokeDasharrayTotal","transform","BottomRight","x","y","fill","stroke","strokeDasharray","textAnchor","LabelNewLine","hasChildren","containerWidth","containerHeight","fullLabel","maxTextRows","Math","floor","splitLabel","split","concat","slice","map","item","index","key","dy","maxWidth","ellipsis","cachedCharWidth","char","cached","charWidth","truncatedChars","charArray","Array","from","ellipsisWidth","currentWidth","didTruncate","i","join","truncateText","Node","bgColor","borderColor","hideNumberOfChildren","treemapId","url","x0","x1","xScaleFactor","xScaleFunction","xTranslated","y0","y1","yScaleFactor","yScaleFunction","yTranslated","zoomEnabled","currentXTranslated","currentYTranslated","currentHeight","cursor","showNumberOfItems","paddedCurrentWidth","clipWidth","max","handleMouseMove","ev","handleMouseLeave","onMouseEnter","onMouseLeave","onMouseMove","classnames","Node__link","href","target","clipPath","name","children","link","Breadcrumb","Utils","getTopSubParent","node","parent","getDepth","obj","childrenPropInData","depth","forEach","d","tmpDepth","getHighContrastColor","r","g","b","c","pow","getHighContrastColorFromString","backgroundColor","rgbColor","rgb","TooltipContainer","position","offsetX","offsetY","useMeasure","measureRef","newX","newY","round","pointerEvents","zIndex","top","left","TooltipProvider","tooltipPlacement","tooltipOffsetX","tooltipOffsetY","containerRef","isVisible","setIsVisible","pos","setPos","content","setContent","setPlacement","clientX","clientY","getBoundingClientRect","tooltipContextValue","Provider","TreeMap","_onBreadcrumbItemClicked","_zoomTo","currentTarget","_onNodeClick","parseInt","namePropInData","_createD3TreeMap","scaleLinear","range","breadcrumbItems","selectedId","selectedNode","_treemap","_rootData","UNSAFE_componentWillReceiveProps","nextProps","svgClassName","svgStyle","breadCrumbClassName","disableBreadcrumb","reactNodes","maxLevel","iterateAllChildren","mainNode","_getNode","hasOwnProperty","element","valuePropInData","valueFormat","treemap","size","tile","treemapSquarify","ratio","paddingOuter","hierarchy","sum","s","sort","a","numberItemId","_nodes","each","descendants","_valueFormatFunction","format","e","warn","Depth","Value","extent","n","_nodesbgColorFunction","domain","valueUnit","hideValue","linkPropInData","nodeClassNameFromData","formatted","formattedValue","_getColorsFromNode","originalBackgroundColor","interpolate","interpolateHcl","nodeId","currentNode","filter","pop","dx","path","defaultProps","interpolateSpectral"],"mappings":"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","file":"component---src-pages-index-tsx-c49b5c264dcbd3c0dcc2.js","sourcesContent":["import App from \"../App\";\r\nexport default App;\r\n","import \"./App.css\";\r\n\r\nimport ContainerDimensions from \"react-container-dimensions\";\r\nimport { scaleSequential } from \"d3-scale\";\r\nimport * as chromatic from \"d3-scale-chromatic\";\r\nimport { hot } from \"react-hot-loader\";\r\n\r\nimport * as React from \"react\";\r\nimport { data as data1 } from \"../data/data\";\r\nimport { data as data2 } from \"../data/data.1.level\";\r\nimport TreeMap, { ColorModel } from \"../components/TreeMap\";\r\nimport { NumberOfChildrenPlacement } from \"../components/Node\";\r\n\r\ninterface TreeMapInPutData {\r\n  name: string;\r\n  value?: number;\r\n  children?: Array<TreeMapInPutData>;\r\n  className?: string;\r\n}\r\n\r\nclass App extends React.Component<{}, { data: TreeMapInPutData }> {\r\n  private treeMapRef: React.RefObject<TreeMap<TreeMapInPutData>>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data2,\r\n    };\r\n    this.treeMapRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\r\n      \"componentDidMount: \",\r\n      this.treeMapRef && this.treeMapRef.current\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ContainerDimensions>\r\n          {({ width, height }) => {\r\n            return (\r\n              <TreeMap<TreeMapInPutData>\r\n                ref={this.treeMapRef}\r\n                id=\"myTreeMap\"\r\n                width={width}\r\n                height={400}\r\n                data={this.state.data}\r\n                className=\"AppTreeMap\"\r\n                nodeClassName=\"AppTreeMap__node\"\r\n                valueFn={(value: number) => {\r\n                  return `${value.toString().charAt(0)} min`;\r\n                }}\r\n                levelsToDisplay={2}\r\n                // tooltipOffsetY={25}\r\n                // tooltipClassName=\"MyCustomTooltip\"\r\n                // tooltipPlacement=\"top\"\r\n                // disableTooltip={true}\r\n                // valueUnit={\"MB\"}\r\n                // svgClassName=\"AppTreeMap__svg\"\r\n                paddingInner={2}\r\n                onZoom={(level, id, items) => console.log({ level, id, items })}\r\n                onTreeMapDidMount={(treeMap: TreeMap<TreeMapInPutData>) =>\r\n                  console.log(treeMap.getZoomLevel())\r\n                }\r\n                nodeStyle={{\r\n                  fontSize: 12,\r\n                  paddingTop: 2,\r\n                  paddingLeft: 5,\r\n                  paddingRight: 5,\r\n                }}\r\n                numberOfChildrenPlacement={NumberOfChildrenPlacement.TopRight}\r\n                customD3ColorScale={scaleSequential(\r\n                  chromatic.interpolateSpectral\r\n                )}\r\n                colorModel={ColorModel.OneEachChildren}\r\n                // svgStyle={{fontFamily: \"'Courier New', Courier, monospace\"}}\r\n                // nodeStyle={{fill: \"black\", stroke: \"white\"}}\r\n                // disableBreadcrumb={true}\r\n                // hideNumberOfChildren={true}\r\n                // hideValue={true}\r\n                darkNodeBorderColor=\"silver\"\r\n                darkNodeTextColor=\"white\"\r\n                lightNodeBorderColor=\"brown\"\r\n                lightNodeTextColor=\"brown\"\r\n              />\r\n            );\r\n          }}\r\n        </ContainerDimensions>\r\n        <div>\r\n          <a onClick={() => this.setState({ data: data2 })}>Change data</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.resetZoom()}>Zoom Reset</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.zoomOut()}>Zoom out</a>\r\n        </div>\r\n        <div>\r\n          <a\r\n            onClick={() => console.log(this.treeMapRef.current.getZoomLevel())}\r\n          >\r\n            Zoom level\r\n          </a>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(App);\r\n","import * as React from \"react\";\n\nexport interface ITooltipContext {\n  showTooltip: (content: React.ReactNode, event: React.MouseEvent) => void;\n  hideTooltip: () => void;\n  tooltipClassName?: string;\n  disableTooltip: boolean;\n}\n\nconst defaultValues: ITooltipContext = {\n  showTooltip: () => {\n    throw new Error(\"TooltipContext not initalized\");\n  },\n  hideTooltip: () => {\n    throw new Error(\"TooltipContext not initalized\");\n  },\n  disableTooltip: false,\n};\n\nconst TooltipContext = React.createContext<ITooltipContext>(defaultValues);\n\nexport default TooltipContext;\n","let canvas;\nexport const getTextDimensions = (\n  text: string,\n  style: React.CSSProperties = {\n    fontVariant: \"normal\",\n    fontWeight: \"normal\",\n    fontSize: 14,\n    fontFamily: \"Arial\",\n  }\n) => {\n  // re-use canvas object for better performance\n  if (!canvas) {\n    canvas = document.createElement(\"canvas\");\n  }\n  var context = canvas.getContext(\"2d\");\n  const { fontVariant, fontWeight, fontSize, fontFamily } = style;\n  const heightSpacingAround = 2;\n  const height = Number(fontSize) + heightSpacingAround;\n  if (context) {\n    context.font = `${fontVariant} ${fontWeight} ${fontSize}px '${fontFamily}'`;\n    return {\n      width: Number(context.measureText(text).width),\n      height,\n    };\n  } else {\n    return { width: 0, height };\n  }\n};\n\nconst charWidthCache: Record<string, number> = {};\nexport const truncateText = (\n  text: string,\n  style: React.CSSProperties,\n  maxWidth: number,\n  ellipsis: string = \"...\"\n) => {\n  const cachedCharWidth = (char: string) => {\n    const cached = charWidthCache[char];\n    if (cached !== undefined) {\n      return cached;\n    }\n    const charWidth = getTextDimensions(char, style).width;\n    charWidthCache[char] = charWidth;\n    return charWidth;\n  };\n\n  const truncatedChars: string[] = [];\n  const charArray = Array.from(text);\n\n  const ellipsisWidth = cachedCharWidth(ellipsis);\n  if (maxWidth - ellipsisWidth < 0) {\n    return text.charAt(0);\n  }\n\n  let currentWidth = ellipsisWidth;\n  let didTruncate = false;\n  for (let i = 0; i < charArray.length; i++) {\n    const charWidth = cachedCharWidth(charArray[i]);\n    if (currentWidth + charWidth <= maxWidth) {\n      truncatedChars[i] = charArray[i];\n      currentWidth += charWidth;\n    } else {\n      truncatedChars[i] = ellipsis;\n      didTruncate = true;\n      break;\n    }\n  }\n\n  if (didTruncate) {\n    return truncatedChars.join(\"\");\n  }\n\n  return text;\n};\n\nexport const getNumberItemsWidthByNumberOfChars = (\n  fontSize: number,\n  numberOfChars: number\n) => {\n  return (fontSize / 2) * numberOfChars + 5;\n};\n","import * as React from \"react\";\nimport { getNumberItemsWidthByNumberOfChars } from \"../helpers\";\n\nexport enum NumberOfChildrenPlacement {\n  TopRight,\n  BottomRight,\n}\n\ninterface NumberOfChildrenProps {\n  customId: number;\n  width: number;\n  height: number;\n  textColor: string;\n  nodeTotalNodes: number;\n  isSelectedNode: boolean;\n  placement: NumberOfChildrenPlacement;\n  style: React.CSSProperties;\n}\n\nconst NumberOfChildren: React.FunctionComponent<NumberOfChildrenProps> = ({\n  customId,\n  width,\n  height,\n  textColor,\n  nodeTotalNodes,\n  isSelectedNode,\n  placement,\n  style,\n}) => {\n  const realPlacement = isSelectedNode\n    ? NumberOfChildrenPlacement.TopRight\n    : placement;\n\n  const fontSize = Number(style.fontSize);\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\n    fontSize,\n    nodeTotalNodes.toString().length\n  );\n  const itemHeightFactor = 2;\n  const itemsHeight = fontSize + itemHeightFactor;\n  const strokeDasharrayTotal = itemsWidth + itemsHeight;\n  if (width > itemsWidth && height > itemsHeight) {\n    return (\n      <g\n        transform={`translate(0, ${\n          realPlacement === NumberOfChildrenPlacement.BottomRight\n            ? height - itemsHeight\n            : 0\n        })`}\n      >\n        <rect\n          id={`rectNumberItems-${customId}`}\n          x={width - itemsWidth}\n          y={0}\n          width={itemsWidth}\n          height={itemsHeight}\n          fill=\"none\"\n          stroke={textColor}\n          strokeDasharray={`${\n            realPlacement === NumberOfChildrenPlacement.BottomRight\n              ? itemsWidth\n              : 0\n          },${strokeDasharrayTotal},${strokeDasharrayTotal}`}\n        />\n        <text\n          fill={textColor}\n          x={width - itemsWidth + itemsWidth / 2}\n          y={itemsHeight - itemHeightFactor}\n          textAnchor=\"middle\"\n          style={{\n            fontVariant: style.fontVariant,\n            fontWeight: style.fontWeight,\n            fontSize: style.fontSize,\n            fontFamily: style.fontFamily,\n          }}\n        >\n          {nodeTotalNodes}\n        </text>\n      </g>\n    );\n  }\n  return null;\n};\n\nexport default NumberOfChildren;\n","import * as React from \"react\";\n\nimport TooltipContext from \"./TooltipContext\";\n\nconst useTooltip = () => {\n  return React.useContext(TooltipContext);\n};\n\nexport default useTooltip;\n","import \"./Tooltip.css\";\n\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nimport useTooltip from \"./useTooltip\";\n\ninterface TooltipProps {\n  label: React.ReactNode;\n  value?: number | string | Date;\n}\n\nexport const Tooltip = React.memo<TooltipProps>(({ label, value }) => {\n  const { tooltipClassName } = useTooltip();\n  return (\n    <div className={tooltipClassName}>\n      <div className=\"TreeMap__tooltip\">\n        {value !== undefined ? (\n          <>\n            <span className=\"TreeMap__tooltipLabel\">{label}: </span>\n            <span className=\"TreeMap__tooltipValue\">{`${value}`}</span>\n          </>\n        ) : (\n          label\n        )}\n      </div>\n    </div>\n  );\n});\n","import * as React from \"react\";\nimport { getTextDimensions, truncateText } from \"../helpers\";\n\ninterface LabelNewLineProps {\n  label: string;\n  textColor: string;\n  value: string;\n  hasChildren: boolean;\n  containerWidth: number;\n  containerHeight: number;\n  style: React.CSSProperties;\n}\n\nconst LabelNewLine: React.FunctionComponent<LabelNewLineProps> = ({\n  label,\n  textColor,\n  value,\n  hasChildren,\n  containerWidth,\n  containerHeight,\n  style,\n}) => {\n  if (!label) {\n    return null;\n  }\n\n  const fullLabel = value ? `${label}\\xa0${value}` : label;\n  const { width, height } = getTextDimensions(fullLabel, style);\n  if (containerHeight < height) {\n    return null;\n  }\n  const maxTextRows = Math.floor(containerHeight / height);\n  const splitLabel =\n    width >= containerWidth || !hasChildren\n      ? label\n          .split(/(?=[A-Z/a-z0-9.][^A-Z/a-z0-9. ])/g)\n          .concat(value)\n          .slice(0, maxTextRows)\n      : [fullLabel];\n\n  return (\n    <>\n      {splitLabel.map((item: string, index) => {\n        return (\n          <tspan\n            fontSize={style.fontSize}\n            fill={textColor}\n            key={index}\n            x={0}\n            dy={style.fontSize}\n          >\n            {truncateText(item, style, containerWidth)}\n          </tspan>\n        );\n      })}\n    </>\n  );\n};\n\nexport default LabelNewLine;\n","import \"./Node.css\";\r\n\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { ScaleLinear } from \"d3-scale\";\r\nimport useTooltip from \"../Tooltip/useTooltip\";\r\nimport { Tooltip } from \"../Tooltip/Tooltip\";\r\nimport NumberOfChildren, {\r\n  NumberOfChildrenPlacement,\r\n} from \"./NumberOfChildren\";\r\nimport { getNumberItemsWidthByNumberOfChars } from \"./helpers\";\r\nimport LabelNewLine from \"./LabelNewLine\";\r\n\r\nexport interface NodeProps {\r\n  /*\r\n        HierarchyRectangularNode properties\r\n    */\r\n  x0?: number;\r\n  y0?: number;\r\n  x1?: number;\r\n  y1?: number;\r\n\r\n  bgColor: string;\r\n  textColor: string;\r\n  borderColor: string;\r\n  className?: string;\r\n  hasChildren: boolean;\r\n  height?: number;\r\n  hideNumberOfChildren?: boolean;\r\n  id: number;\r\n  isSelectedNode: boolean;\r\n  label: string;\r\n  nodeTotalNodes: number;\r\n  onClick?: (ev?: React.MouseEvent<SVGElement>) => void;\r\n  style?: React.CSSProperties;\r\n  treemapId?: string;\r\n  url: string;\r\n  value: string;\r\n  width?: number;\r\n  xScaleFactor?: number;\r\n  xScaleFunction?: ScaleLinear<number, number>;\r\n  xTranslated?: number;\r\n  yScaleFactor?: number;\r\n  yScaleFunction?: ScaleLinear<number, number>;\r\n  yTranslated?: number;\r\n  zoomEnabled?: boolean;\r\n  numberOfChildrenPlacement: NumberOfChildrenPlacement;\r\n}\r\n\r\nconst Node: React.FunctionComponent<NodeProps> = ({\r\n  bgColor,\r\n  borderColor,\r\n  className,\r\n  hasChildren,\r\n  height,\r\n  hideNumberOfChildren,\r\n  id,\r\n  isSelectedNode,\r\n  label,\r\n  nodeTotalNodes,\r\n  onClick,\r\n  textColor,\r\n  treemapId,\r\n  url,\r\n  value,\r\n  width,\r\n  x0,\r\n  x1,\r\n  xScaleFactor,\r\n  xScaleFunction,\r\n  xTranslated,\r\n  y0,\r\n  y1,\r\n  yScaleFactor,\r\n  yScaleFunction,\r\n  yTranslated,\r\n  zoomEnabled,\r\n  style,\r\n  numberOfChildrenPlacement,\r\n}) => {\r\n  const currentXTranslated =\r\n    xTranslated !== undefined\r\n      ? xTranslated\r\n      : zoomEnabled === true\r\n      ? xScaleFunction(x0)\r\n      : x0;\r\n  const currentYTranslated =\r\n    yTranslated !== undefined\r\n      ? yTranslated\r\n      : zoomEnabled === true\r\n      ? yScaleFunction(y0)\r\n      : y0;\r\n  const currentWidth = width !== undefined ? width : xScaleFactor * (x1 - x0);\r\n  const currentHeight =\r\n    height !== undefined ? height : yScaleFactor * (y1 - y0);\r\n\r\n  const cursor =\r\n    hasChildren === true && isSelectedNode === false ? \"pointer\" : \"auto\";\r\n\r\n  const fontSize = Number(style.fontSize);\r\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\r\n    fontSize,\r\n    nodeTotalNodes.toString().length\r\n  );\r\n  const showNumberOfItems = !hideNumberOfChildren && hasChildren;\r\n\r\n  const paddedCurrentWidth =\r\n    currentWidth -\r\n    (Number(style.paddingLeft) || 0) -\r\n    (Number(style.paddingRight) || 4);\r\n  const clipWidth = Math.max(\r\n    0,\r\n    showNumberOfItems &&\r\n      numberOfChildrenPlacement === NumberOfChildrenPlacement.TopRight\r\n      ? paddedCurrentWidth - itemsWidth\r\n      : paddedCurrentWidth\r\n  );\r\n\r\n  const { hideTooltip, showTooltip, disableTooltip } = useTooltip();\r\n\r\n  const handleMouseMove = React.useCallback(\r\n    (ev: React.MouseEvent) => {\r\n      showTooltip(<Tooltip label={label} value={value} />, ev);\r\n    },\r\n    [showTooltip]\r\n  );\r\n\r\n  const handleMouseLeave = React.useCallback(() => {\r\n    hideTooltip();\r\n  }, [showTooltip]);\r\n\r\n  return (\r\n    <g\r\n      onMouseEnter={disableTooltip ? undefined : handleMouseMove}\r\n      onMouseLeave={disableTooltip ? undefined : handleMouseLeave}\r\n      onMouseMove={disableTooltip ? undefined : handleMouseMove}\r\n      transform={`translate(${currentXTranslated},${currentYTranslated})`}\r\n      id={`${id}`}\r\n      onClick={hasChildren ? onClick : null}\r\n      style={{ cursor }}\r\n    >\r\n      <rect\r\n        id={`rect-${id}`}\r\n        width={currentWidth}\r\n        height={currentHeight}\r\n        className={classnames(\"Node\", className)}\r\n        style={{\r\n          fill: bgColor,\r\n          stroke: borderColor,\r\n          ...style,\r\n        }}\r\n      />\r\n      <clipPath id={`clip-${treemapId}-${id}`}>\r\n        <rect width={clipWidth} height={currentHeight} />\r\n      </clipPath>\r\n      <a\r\n        className={classnames({ Node__link: !!url })}\r\n        href={url}\r\n        target=\"_blank\"\r\n      >\r\n        <text\r\n          clipPath={`url(#clip-${treemapId}-${id})`}\r\n          transform={`translate(${style.paddingLeft || 0},${\r\n            style.paddingTop || 0\r\n          })`}\r\n          style={{\r\n            fontVariant: style.fontVariant,\r\n            fontWeight: style.fontWeight,\r\n            fontSize: style.fontSize,\r\n            fontFamily: style.fontFamily,\r\n          }}\r\n        >\r\n          <LabelNewLine\r\n            label={label}\r\n            textColor={textColor}\r\n            value={value}\r\n            hasChildren={hasChildren}\r\n            containerWidth={clipWidth}\r\n            containerHeight={currentHeight}\r\n            style={style}\r\n          />\r\n        </text>\r\n      </a>\r\n      {showNumberOfItems && (\r\n        <NumberOfChildren\r\n          customId={id}\r\n          width={currentWidth}\r\n          height={currentHeight}\r\n          style={style}\r\n          textColor={textColor}\r\n          nodeTotalNodes={nodeTotalNodes}\r\n          isSelectedNode={isSelectedNode}\r\n          placement={numberOfChildrenPlacement}\r\n        />\r\n      )}\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","export { default, NodeProps } from \"./Node\";\nexport { NumberOfChildrenPlacement } from \"./NumberOfChildren\";\n","export const data = {\r\n  name: \"Documents\",\r\n  children: [\r\n    {\r\n      name: \"AgglomerativeCluster\",\r\n      value: 3938,\r\n      link: \"https://blog.josequinto.com\",\r\n    },\r\n    { name: \"CommunityStructure\", value: 3812 },\r\n    { name: \"Child 2\", value: 6714 },\r\n    {\r\n      name: \"Child 1\",\r\n      children: [\r\n        { name: \"Child 1.1\", value: 12 },\r\n        { name: \"Child 1.2\", value: 200 },\r\n        { name: \"Child 1.3\", value: 300 },\r\n        { name: \"Child 1.4\", value: 743 },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n","import { ScaleSequential } from \"d3-scale\";\r\nimport TreeMap from \"../TreeMap\";\r\nimport { IBreadcrumbItem } from \"../Breadcrumb\";\r\nimport { NumberOfChildrenPlacement } from \"../Node\";\r\nimport { TooltipPlacement } from \"../Tooltip/types\";\r\n\r\nexport interface ITreeMapProps<TreeMapInputData> {\r\n  /**\r\n   * TreeMap id, will be use for create customId for each node\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * TreeMap width\r\n   */\r\n  width: number;\r\n\r\n  /**\r\n   * TreeMap height\r\n   */\r\n  height: number;\r\n\r\n  /**\r\n   * TreeMap data. Normally should have at least name, value and children.\r\n   *\r\n   * Example:\r\n   *  interface TreeMapInPutData {\r\n   *      name: string;\r\n   *      value?: number;\r\n   *      children?: Array<TreeMapInPutData>;\r\n   *      className?: string;\r\n   *  }\r\n   */\r\n  data: TreeMapInputData;\r\n\r\n  /*\r\n        Unit for values. For example MB\r\n    */\r\n  valueUnit?: string;\r\n\r\n  /*\r\n   * Format for the values\r\n   * https://github.com/d3/d3-format#format\r\n   */\r\n  valueFormat?: string;\r\n\r\n  /**\r\n   * Hide breadcrumb.\r\n   *\r\n   * If you app doesn't use breadcrumb, you can pass down a ref\r\n   * and use the methods: zoomOut, resetZoom\r\n   */\r\n  disableBreadcrumb?: boolean;\r\n\r\n  /**\r\n   * There are few color strategies for nodes:\r\n   *    Depth: different color per depth\r\n   *    Value: different color depends on how big / small is the value\r\n   *    NumberOfChildren: different color depends on how many children node has\r\n   *    OneEachChildren: one color per each top children, then range of colors from white to that one\r\n   */\r\n  colorModel?: ColorModel;\r\n\r\n  /**\r\n   * Don't show the top right corner box indicating number of children\r\n   */\r\n  hideNumberOfChildren?: boolean;\r\n\r\n  /**\r\n   * Don't show the value\r\n   */\r\n  hideValue?: boolean;\r\n\r\n  /**\r\n   * Overrides top div main class\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Overrides svg class\r\n   */\r\n  svgClassName?: string;\r\n\r\n  /**\r\n   * Overrides node class\r\n   */\r\n  nodeClassName?: string;\r\n\r\n  /**\r\n   * Overrides breadcrumb class\r\n   */\r\n  breadCrumbClassName?: string;\r\n\r\n  /**\r\n   * Overrides svg style\r\n   */\r\n  svgStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Overrides node style\r\n   */\r\n  nodeStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Padding between nodes ( calculated by D3 )\r\n   */\r\n  paddingInner?: number;\r\n\r\n  /**\r\n   * Custom ScaleSequential from D3\r\n   */\r\n  customD3ColorScale?: ScaleSequential<string>;\r\n\r\n  /**\r\n   * Name for the property `name` included in data\r\n   *\r\n   * @default \"name\"\r\n   */\r\n  namePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `link` included in data\r\n   *\r\n   * @default \"link\"\r\n   */\r\n  linkPropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `value` included in data\r\n   *\r\n   * @default \"value\"\r\n   */\r\n  valuePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `children` included in data\r\n   *\r\n   * @default \"children\"\r\n   */\r\n  childrenPropInData?: string;\r\n\r\n  /**\r\n   * Captures on zoom event\r\n   */\r\n  onZoom?: (\r\n    zoomLevel: number,\r\n    zoomId: number,\r\n    breadcrumbItems: IBreadcrumbItem[]\r\n  ) => void;\r\n\r\n  /**\r\n   * Triggers when TreeMap is mounted\r\n   */\r\n  onTreeMapDidMount?: (treeMap: TreeMap<TreeMapInputData>) => void;\r\n\r\n  /**\r\n   * Indicates where to place NumberOfChildren box\r\n   *\r\n   * @default NumberOfChildrenPlacement.BottomRight\r\n   */\r\n  numberOfChildrenPlacement: NumberOfChildrenPlacement;\r\n\r\n  /**\r\n   * Color for text and children counter when background is dark\r\n   *\r\n   * @default white\r\n   */\r\n  darkNodeTextColor?: string;\r\n\r\n  /**\r\n   * Color for node border when background is dark\r\n   *\r\n   * @default white\r\n   */\r\n  darkNodeBorderColor?: string;\r\n\r\n  /**\r\n   * Color for text and children counter when background is light\r\n   *\r\n   * @default black\r\n   */\r\n  lightNodeTextColor?: string;\r\n\r\n  /**\r\n   * Color for node border when background is dark\r\n   *\r\n   * @default black\r\n   */\r\n  lightNodeBorderColor?: string;\r\n\r\n  /**\r\n   * Override value text for node\r\n   */\r\n  valueFn?: (value: number) => string;\r\n\r\n  /**\r\n   * Tooltip placement. If none is specified then is automatic depending on\r\n   * the quadrant of the treeMap\r\n   */\r\n  tooltipPlacement?: TooltipPlacement;\r\n\r\n  /**\r\n   * Tooltip custom css class\r\n   */\r\n  tooltipClassName?: string;\r\n\r\n  /**\r\n   * Disable custom tooltip\r\n   *\r\n   * @default false\r\n   */\r\n  disableTooltip?: boolean;\r\n\r\n  /**\r\n   * Tooltip offset X\r\n   *\r\n   * @default 0\r\n   */\r\n  tooltipOffsetX?: number;\r\n\r\n  /**\r\n   * Tooltip offset Y\r\n   *\r\n   * @default 0\r\n   */\r\n  tooltipOffsetY?: number;\r\n\r\n  /**\r\n   * Number of levels to display in TreeMap\r\n   *\r\n   * @default 1\r\n   */\r\n  levelsToDisplay?: number;\r\n}\r\n\r\nexport enum ColorModel {\r\n  Depth,\r\n  Value,\r\n  NumberOfChildren,\r\n  OneEachChildren,\r\n}\r\n","import \"./Breadcrumb.css\";\n\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nexport interface IBreadcrumbProps {\n  /**\n   * Collection of breadcrumbs to render\n   */\n  items: IBreadcrumbItem[];\n  className?: string;\n}\n\nexport interface IBreadcrumbItem {\n  /**\n   * Text to display to the user for the breadcrumb\n   */\n  text: string;\n  /**\n   * Arbitrary unique string associated with the breadcrumb\n   */\n  key: number;\n  /**\n   * Callback issued when the breadcrumb is selected.\n   */\n  onClick?: (\n    ev?: React.MouseEvent<HTMLElement>,\n    item?: IBreadcrumbItem\n  ) => void;\n}\n\nexport const Breadcrumb: React.FunctionComponent<IBreadcrumbProps> = ({\n  className,\n  items\n}) => {\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <div className={classnames(\"TreeMap__breadcrumb\", className)}>\n      {items.map((item: IBreadcrumbItem, index: number) => (\n        <div key={index}>\n          <a\n            className=\"TreeMap__breadcrumbItem\"\n            key={item.key}\n            id={`${item.key}`}\n            onClick={item.onClick ? item.onClick : undefined}\n            style={{ cursor: item.onClick ? \"pointer\" : \"auto\" }}\n          >\n            {item.text}\n          </a>\n          {index < items.length - 1 ? (\n            <span className=\"TreeMap__breadcrumbSeparator\">/</span>\n          ) : null}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { CustomHierarchyRectangularNode } from \"../components/TreeMap/TreeMap\";\nimport { rgb } from \"d3-color\";\n\nexport class Utils {\n  public static getTopSubParent<TreeMapInputData>(\n    node: CustomHierarchyRectangularNode<TreeMapInputData>\n  ): number {\n    if (node.parent && node.parent.parent) {\n      return this.getTopSubParent(node.parent);\n    }\n    return node.customId;\n  }\n\n  public static getDepth<TreeMapInputData>(\n    obj: TreeMapInputData,\n    childrenPropInData: string\n  ) {\n    let depth = 0;\n    if (obj[childrenPropInData]) {\n      obj[childrenPropInData].forEach((d) => {\n        const tmpDepth = this.getDepth(d, childrenPropInData);\n        if (tmpDepth > depth) {\n          depth = tmpDepth;\n        }\n      });\n    }\n    return 1 + depth;\n  }\n\n  public static getHighContrastColor(\n    r: number,\n    g: number,\n    b: number\n  ): \"dark\" | \"light\" {\n    // based on\n    // http://stackoverflow.com/questions/407793/programmatically-choose-high-contrast-colors\n    // http://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color\n    const c = [r / 255, g / 255, b / 255];\n    for (let i = 0; i < c.length; ++i) {\n      if (c[i] <= 0.03928) {\n        c[i] = c[i] / 12.92;\n      } else {\n        c[i] = Math.pow((c[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n    const luminance = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    // return luminance > 0.179 ? \"black\" : \"white\";\n    return luminance > 0.4 ? \"light\" : \"dark\";\n  }\n\n  public static getHighContrastColorFromString(\n    backgroundColor: string | undefined\n  ): \"dark\" | \"light\" {\n    if (!backgroundColor) {\n      return \"dark\";\n    }\n    const rgbColor = rgb(backgroundColor);\n    if (rgbColor) {\n      return Utils.getHighContrastColor(rgbColor.r, rgbColor.g, rgbColor.b);\n    }\n  }\n}\n","import * as React from \"react\";\nimport { useMeasure } from \"react-use\";\nimport { TooltipPlacement, TooltipPosition } from \"./types\";\n\ninterface TooltipContainerProps {\n  position: TooltipPosition;\n  placement: TooltipPlacement;\n  children?: React.ReactNode;\n  offsetX?: number;\n  offsetY?: number;\n}\n\nexport const TooltipContainer = React.memo<TooltipContainerProps>(\n  ({ position, placement, offsetX = 0, offsetY = 0, children }) => {\n    const [measureRef, { width, height }] = useMeasure();\n\n    const [newX, newY] = position;\n    let x = Math.round(newX);\n    let y = Math.round(newY);\n\n    const marginOffset = 10;\n\n    if (width > 0 && height > 0) {\n      switch (placement) {\n        case \"bottom\":\n          x -= width / 2;\n          y += marginOffset;\n          break;\n        case \"bottomLeft\":\n          x -= width + marginOffset;\n          y += height / 2 + marginOffset;\n          break;\n        case \"bottomRight\":\n          x += marginOffset;\n          y += height / 2 + marginOffset;\n          break;\n        case \"left\":\n          x -= width + marginOffset;\n          y -= height / 2;\n          break;\n        case \"right\":\n          x += marginOffset;\n          y -= height / 2;\n          break;\n        case \"top\":\n          x -= width / 2;\n          y -= height + marginOffset;\n          break;\n        case \"topLeft\":\n          x -= width + marginOffset;\n          y -= height + marginOffset;\n          break;\n        case \"topRight\":\n          x += marginOffset;\n          y -= height + marginOffset;\n          break;\n        default:\n          break;\n      }\n    }\n\n    x += offsetX;\n    y += offsetY;\n\n    const style: React.CSSProperties = {\n      pointerEvents: \"none\",\n      position: \"absolute\",\n      zIndex: 10,\n      top: 0,\n      left: 0,\n      maxWidth: \"calc(50% - 15px)\",\n      transform: `translate(${x}px, ${y}px)`,\n    };\n\n    return (\n      <div ref={measureRef} style={style}>\n        {children}\n      </div>\n    );\n  }\n);\n\nexport default TooltipContainer;\n","import * as React from \"react\";\nimport TooltipContainer from \"./TooltipContainer\";\nimport TooltipContext from \"./TooltipContext\";\nimport { TooltipPlacement, TooltipPosition } from \"./types\";\n\nconst TooltipProvider: React.FunctionComponent<{\n  tooltipPlacement?: TooltipPlacement;\n  tooltipClassName?: string;\n  disableTooltip: boolean;\n  tooltipOffsetX?: number;\n  tooltipOffsetY?: number;\n  children?: React.ReactNode;\n}> = ({\n  tooltipPlacement,\n  tooltipClassName,\n  tooltipOffsetX,\n  tooltipOffsetY,\n  disableTooltip,\n  children,\n}) => {\n  const containerRef = React.useRef<HTMLDivElement>(null);\n  const [isVisible, setIsVisible] = React.useState<boolean>(false);\n  const [pos, setPos] = React.useState<TooltipPosition>([null, null]);\n  const [content, setContent] = React.useState<React.ReactNode>(null);\n  const [placement, setPlacement] = React.useState<TooltipPlacement>(\n    tooltipPlacement\n  );\n\n  const showTooltip = React.useCallback(\n    (content: React.ReactNode, { clientX, clientY }: React.MouseEvent) => {\n      const {\n        width,\n        height,\n        left,\n        top,\n      } = containerRef.current.getBoundingClientRect();\n      const x = clientX - left;\n      const y = clientY - top;\n\n      if (!placement) {\n        const autoPlacement: TooltipPlacement =\n          x < width / 2\n            ? y < height / 2\n              ? \"bottomRight\"\n              : \"topRight\"\n            : y < height / 2\n            ? \"bottomLeft\"\n            : \"topLeft\";\n        setPlacement(autoPlacement);\n      }\n\n      setIsVisible(true);\n      setPos([x, y]);\n      setContent(content);\n    },\n    [containerRef, setContent, setIsVisible, setPos]\n  );\n\n  const hideTooltip = React.useCallback(() => {\n    setIsVisible(false);\n  }, [setIsVisible, setPos]);\n\n  const tooltipContextValue = React.useMemo(\n    () => ({\n      showTooltip,\n      hideTooltip,\n      tooltipClassName,\n      disableTooltip,\n    }),\n    [showTooltip, hideTooltip, tooltipClassName]\n  );\n\n  return (\n    <TooltipContext.Provider value={tooltipContextValue}>\n      <div ref={containerRef}>\n        {children}\n        {isVisible && (\n          <TooltipContainer\n            position={pos}\n            placement={placement}\n            offsetX={tooltipOffsetX}\n            offsetY={tooltipOffsetY}\n          >\n            {content}\n          </TooltipContainer>\n        )}\n      </div>\n    </TooltipContext.Provider>\n  );\n};\n\nexport default TooltipProvider;\n","import * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { format } from \"d3-format\";\r\n\r\nimport {\r\n  TreemapLayout,\r\n  HierarchyRectangularNode,\r\n  treemap,\r\n  hierarchy,\r\n  treemapSquarify,\r\n} from \"d3-hierarchy\";\r\nimport { scaleLinear, ScaleSequential, scaleSequential } from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport { interpolateSpectral } from \"d3-scale-chromatic\";\r\nimport { interpolateHcl } from \"d3-interpolate\";\r\n\r\nimport Node, { NumberOfChildrenPlacement } from \"../Node\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\";\r\nimport { ITreeMapState } from \"./ITreeMapState\";\r\nimport { Utils } from \"../../utils/Utils\";\r\nimport TooltipProvider from \"../Tooltip/TooltipProvider\";\r\n\r\nexport interface CustomHierarchyRectangularNode<TreeMapInputData>\r\n  extends HierarchyRectangularNode<TreeMapInputData> {\r\n  customId: number;\r\n}\r\n\r\nclass TreeMap<TreeMapInputData> extends React.Component<\r\n  ITreeMapProps<TreeMapInputData>,\r\n  ITreeMapState<TreeMapInputData>\r\n> {\r\n  // Default Props values\r\n  public static defaultProps: ITreeMapProps<{}> = {\r\n    id: \"myTreeMap\",\r\n    data: null,\r\n    height: 600,\r\n    width: 600,\r\n    valueFormat: \",d\",\r\n    disableBreadcrumb: false,\r\n    colorModel: ColorModel.OneEachChildren,\r\n    paddingInner: 0,\r\n    customD3ColorScale: scaleSequential(interpolateSpectral),\r\n    namePropInData: \"name\",\r\n    linkPropInData: \"link\",\r\n    valuePropInData: \"value\", // can be value, count, ...\r\n    childrenPropInData: \"children\",\r\n    numberOfChildrenPlacement: NumberOfChildrenPlacement.BottomRight,\r\n    darkNodeTextColor: \"white\",\r\n    darkNodeBorderColor: \"white\",\r\n    lightNodeTextColor: \"black\",\r\n    lightNodeBorderColor: \"black\",\r\n    disableTooltip: false,\r\n    tooltipOffsetX: 0,\r\n    tooltipOffsetY: 0,\r\n    levelsToDisplay: 1,\r\n  };\r\n\r\n  // Note. This treemap element initially was using treemap and hierarchy directly on the render.\r\n  //       I noticed a performance problem when the original data \"this.props.data\" has more than 1500 elements.\r\n  //       Now, the component is designed to show only the first level of nodes and when click on one expand the rest.\r\n  private _treemap: TreemapLayout<TreeMapInputData>;\r\n  private _rootData: HierarchyRectangularNode<TreeMapInputData>;\r\n  private _nodes: Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n  private _valueFormatFunction:\r\n    | ((n: number | { valueOf(): number }) => string)\r\n    | ((date: Date) => string);\r\n  private _nodesbgColorFunction: ScaleSequential<string>;\r\n\r\n  constructor(props: ITreeMapProps<TreeMapInputData>) {\r\n    super(props);\r\n\r\n    const { width, height, data, namePropInData } = props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    // Default State values\r\n    this.state = {\r\n      height,\r\n      width,\r\n      data,\r\n      xScaleFactor: 1,\r\n      yScaleFactor: 1,\r\n      xScaleFunction: scaleLinear().range([0, width]),\r\n      yScaleFunction: scaleLinear().range([0, height]),\r\n      zoomEnabled: false,\r\n      // TODO: Replace data.name by id\r\n      breadcrumbItems: [\r\n        {\r\n          text: data[namePropInData],\r\n          key: 0,\r\n        },\r\n      ],\r\n      selectedId: 0,\r\n      selectedNode: this._treemap(\r\n        this._rootData\r\n      ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { onTreeMapDidMount } = this.props;\r\n    this._zoomTo(0);\r\n    if (onTreeMapDidMount) {\r\n      onTreeMapDidMount(this);\r\n    }\r\n  }\r\n\r\n  public UNSAFE_componentWillReceiveProps(\r\n    nextProps: ITreeMapProps<TreeMapInputData>\r\n  ) {\r\n    const { width, height } = nextProps;\r\n    if (height !== this.props.height || width !== this.props.width) {\r\n      this.setState({\r\n        width,\r\n        height,\r\n        xScaleFunction: scaleLinear().range([0, width]),\r\n        yScaleFunction: scaleLinear().range([0, height]),\r\n        selectedNode: this._treemap(\r\n          this._rootData\r\n        ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { width, height, breadcrumbItems, selectedNode, data } = this.state;\r\n\r\n    const {\r\n      svgClassName,\r\n      svgStyle,\r\n      className,\r\n      childrenPropInData,\r\n      breadCrumbClassName,\r\n      disableBreadcrumb,\r\n      tooltipPlacement,\r\n      tooltipClassName,\r\n      disableTooltip,\r\n      tooltipOffsetX,\r\n      tooltipOffsetY,\r\n      levelsToDisplay,\r\n    } = this.props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    let reactNodes: Array<React.ReactNode> = [];\r\n    const maxLevel = levelsToDisplay;\r\n    const iterateAllChildren = (\r\n      mainNode: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      level: number\r\n    ) => {\r\n      reactNodes = reactNodes.concat(this._getNode(mainNode));\r\n      if (level < maxLevel) {\r\n        if (\r\n          mainNode.hasOwnProperty(childrenPropInData) &&\r\n          mainNode[childrenPropInData].length > 0\r\n        ) {\r\n          mainNode[childrenPropInData].forEach((element) => {\r\n            iterateAllChildren(element, level + 1);\r\n          });\r\n        }\r\n      }\r\n    };\r\n    iterateAllChildren(selectedNode, 0);\r\n\r\n    return (\r\n      <TooltipProvider\r\n        tooltipPlacement={tooltipPlacement}\r\n        tooltipClassName={tooltipClassName}\r\n        disableTooltip={disableTooltip}\r\n        tooltipOffsetX={tooltipOffsetX}\r\n        tooltipOffsetY={tooltipOffsetY}\r\n      >\r\n        <div className={className}>\r\n          {disableBreadcrumb === false ? (\r\n            <Breadcrumb\r\n              items={breadcrumbItems}\r\n              className={breadCrumbClassName}\r\n            />\r\n          ) : null}\r\n          <svg\r\n            className={classnames(svgClassName)}\r\n            height={height}\r\n            width={width}\r\n            style={{ ...svgStyle }}\r\n          >\r\n            {reactNodes}\r\n          </svg>\r\n        </div>\r\n      </TooltipProvider>\r\n    );\r\n  }\r\n\r\n  private _createD3TreeMap(\r\n    width: number,\r\n    height: number,\r\n    data: TreeMapInputData\r\n  ) {\r\n    const {\r\n      valuePropInData,\r\n      childrenPropInData,\r\n      paddingInner,\r\n      valueFormat,\r\n      colorModel,\r\n      customD3ColorScale,\r\n      valueFn,\r\n    } = this.props;\r\n\r\n    // 1. Create treemap structure\r\n    this._treemap = treemap<TreeMapInputData>()\r\n      .size([width, height])\r\n      .tile(treemapSquarify.ratio(1))\r\n      .paddingOuter(3)\r\n      .paddingTop(19)\r\n      .paddingInner(paddingInner)\r\n      .round(true);\r\n\r\n    // 2. Before compute a hierarchical layout, we need a root node\r\n    //    If the data is in JSON we use d3.hierarchy\r\n    this._rootData = hierarchy(data)\r\n      .sum((s) => s[valuePropInData])\r\n      .sort(\r\n        (a, b) => b.height - a.height || b[valuePropInData] - a[valuePropInData]\r\n      ) as HierarchyRectangularNode<TreeMapInputData>;\r\n\r\n    // 3. Get array of nodes\r\n    let numberItemId = 0;\r\n    this._nodes = this._treemap(this._rootData)\r\n      .each((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        item.customId = numberItemId++;\r\n      })\r\n      .descendants() as Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n    // Format function\r\n    try {\r\n      this._valueFormatFunction = valueFn ? valueFn : format(valueFormat);\r\n    } catch (e) {\r\n      console.warn(e);\r\n    }\r\n\r\n    let d: [number | { valueOf(): number }, number | { valueOf(): number }];\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        d = [0, Utils.getDepth<TreeMapInputData>(data, childrenPropInData) - 1];\r\n        break;\r\n      case ColorModel.Value:\r\n        d = extent(this._nodes, (n) => {\r\n          if (n.parent !== null) {\r\n            return n[valuePropInData];\r\n          }\r\n        });\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        d = extent(this._nodes, (n) =>\r\n          n.parent !== null ? n.descendants().length : 1\r\n        );\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        d = [data[childrenPropInData] ? data[childrenPropInData].length : 0, 0];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this._nodesbgColorFunction = customD3ColorScale.domain(d);\r\n  }\r\n\r\n  private _getNode(node: CustomHierarchyRectangularNode<TreeMapInputData>) {\r\n    const {\r\n      id: treemapId,\r\n      valueUnit,\r\n      hideValue,\r\n      hideNumberOfChildren,\r\n      nodeStyle,\r\n      nodeClassName,\r\n      valuePropInData,\r\n      childrenPropInData,\r\n      namePropInData,\r\n      linkPropInData,\r\n      numberOfChildrenPlacement,\r\n      darkNodeTextColor,\r\n      darkNodeBorderColor,\r\n      lightNodeTextColor,\r\n      lightNodeBorderColor,\r\n    } = this.props;\r\n\r\n    const {\r\n      selectedId,\r\n      xScaleFactor,\r\n      xScaleFunction,\r\n      yScaleFactor,\r\n      yScaleFunction,\r\n      zoomEnabled,\r\n    } = this.state;\r\n\r\n    const { customId, data, x0, x1, y0, y1 } = node;\r\n\r\n    const name = data[namePropInData];\r\n    const url = data[linkPropInData];\r\n    const nodeClassNameFromData = data[\"className\"];\r\n\r\n    const hasChildren =\r\n      node[childrenPropInData] && node[childrenPropInData].length > 0\r\n        ? true\r\n        : false;\r\n    let formatted = node[valuePropInData];\r\n    try {\r\n      formatted = this._valueFormatFunction(node[valuePropInData]);\r\n    } catch (e) {\r\n      console.warn(e);\r\n    }\r\n    const formattedValue = `(${formatted}${valueUnit ? ` ${valueUnit}` : \"\"})`;\r\n\r\n    const nodeTotalNodes = node.descendants().length - 1;\r\n\r\n    const { bgColor, textColor, borderColor } = this._getColorsFromNode(\r\n      node,\r\n      nodeTotalNodes,\r\n      {\r\n        darkNodeTextColor,\r\n        darkNodeBorderColor,\r\n        lightNodeTextColor,\r\n        lightNodeBorderColor,\r\n      }\r\n    );\r\n\r\n    const isSelectedNode = customId === selectedId;\r\n\r\n    return (\r\n      <Node\r\n        bgColor={bgColor}\r\n        textColor={textColor}\r\n        borderColor={borderColor}\r\n        className={classnames(nodeClassName, nodeClassNameFromData)}\r\n        style={{\r\n          fontVariant: \"normal\",\r\n          fontWeight: \"normal\",\r\n          fontSize: 14,\r\n          fontFamily: \"Arial\",\r\n          ...nodeStyle,\r\n        }}\r\n        hasChildren={hasChildren}\r\n        hideNumberOfChildren={hideNumberOfChildren}\r\n        id={customId}\r\n        isSelectedNode={isSelectedNode}\r\n        key={customId}\r\n        label={name}\r\n        nodeTotalNodes={nodeTotalNodes}\r\n        onClick={!isSelectedNode ? this._onNodeClick : undefined}\r\n        treemapId={treemapId}\r\n        url={url}\r\n        value={!hideValue && formattedValue}\r\n        x0={x0}\r\n        x1={x1}\r\n        xScaleFactor={xScaleFactor}\r\n        xScaleFunction={xScaleFunction}\r\n        y0={y0}\r\n        y1={y1}\r\n        yScaleFactor={yScaleFactor}\r\n        yScaleFunction={yScaleFunction}\r\n        zoomEnabled={zoomEnabled}\r\n        numberOfChildrenPlacement={numberOfChildrenPlacement}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onBreadcrumbItemClicked = (ev: React.MouseEvent<HTMLElement>) => {\r\n    this._zoomTo(Number(ev.currentTarget.id));\r\n  };\r\n\r\n  private _onNodeClick = (ev: React.MouseEvent<SVGElement>) => {\r\n    this._zoomTo(parseInt(ev.currentTarget.id));\r\n  };\r\n\r\n  private _getColorsFromNode(\r\n    node: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n    nodeTotalNodes: number,\r\n    {\r\n      darkNodeTextColor,\r\n      darkNodeBorderColor,\r\n      lightNodeTextColor,\r\n      lightNodeBorderColor,\r\n    }\r\n  ) {\r\n    const { colorModel, valuePropInData } = this.props;\r\n\r\n    let backgroundColor;\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        backgroundColor = this._nodesbgColorFunction(node.depth);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n        break;\r\n      case ColorModel.Value:\r\n        backgroundColor = this._nodesbgColorFunction(node[valuePropInData]);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        backgroundColor = this._nodesbgColorFunction(nodeTotalNodes);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        const originalBackgroundColor = this._nodesbgColorFunction(\r\n          Utils.getTopSubParent<TreeMapInputData>(node)\r\n        );\r\n        if (node.depth > 1) {\r\n          backgroundColor = scaleLinear<string>()\r\n            .domain([0, node && node.children ? node.children.length : 0])\r\n            .interpolate(interpolateHcl)\r\n            .range([\"white\", originalBackgroundColor])(\r\n            Utils.getTopSubParent<TreeMapInputData>(node)\r\n          );\r\n        } else {\r\n          backgroundColor = originalBackgroundColor;\r\n        }\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return {\r\n      bgColor: backgroundColor,\r\n      textColor:\r\n        Utils.getHighContrastColorFromString(backgroundColor) === \"dark\"\r\n          ? darkNodeTextColor\r\n          : lightNodeTextColor,\r\n      borderColor:\r\n        Utils.getHighContrastColorFromString(backgroundColor) === \"dark\"\r\n          ? darkNodeBorderColor\r\n          : lightNodeBorderColor,\r\n    };\r\n  }\r\n\r\n  private _zoomTo(nodeId: number) {\r\n    const { xScaleFunction, yScaleFunction, width, height } = this.state;\r\n\r\n    const { onZoom } = this.props;\r\n\r\n    const currentNode = this._nodes\r\n      .filter((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        return item.customId.toString() === nodeId.toString();\r\n      })\r\n      .pop();\r\n    if (currentNode) {\r\n      const x = currentNode.x0;\r\n      const y = currentNode.y0;\r\n      const dx = currentNode.x1 - currentNode.x0;\r\n      const dy = currentNode.y1 - currentNode.y0;\r\n      const xScaleFactor = width / dx;\r\n      const yScaleFactor = height / dy;\r\n      const breadcrumbItems = this._treemap(this._rootData)\r\n        .path(currentNode)\r\n        .map(\r\n          ({\r\n            data,\r\n            customId,\r\n          }: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n            return {\r\n              text: data[\"name\"],\r\n              key: customId,\r\n              onClick:\r\n                customId !== nodeId ? this._onBreadcrumbItemClicked : undefined,\r\n            };\r\n          }\r\n        );\r\n      if (onZoom) {\r\n        onZoom(currentNode.depth, nodeId, breadcrumbItems);\r\n      }\r\n      this.setState({\r\n        xScaleFactor,\r\n        yScaleFactor,\r\n        xScaleFunction: xScaleFunction.domain([x, x + dx]),\r\n        yScaleFunction: yScaleFunction.domain([y, y + dy]),\r\n        zoomEnabled: currentNode.parent === null ? false : true,\r\n        selectedId: nodeId,\r\n        selectedNode: currentNode,\r\n        breadcrumbItems,\r\n      });\r\n    } else {\r\n      console.warn(\"No node found for \" + nodeId);\r\n    }\r\n  }\r\n\r\n  public resetZoom() {\r\n    this._zoomTo(0);\r\n  }\r\n\r\n  public zoomOut() {\r\n    const { selectedId } = this.state;\r\n    const selectedNode = this._nodes\r\n      .filter((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        return item.customId === selectedId;\r\n      })\r\n      .pop();\r\n    if (\r\n      selectedNode &&\r\n      selectedNode.parent &&\r\n      selectedNode.parent.customId !== undefined\r\n    ) {\r\n      this._zoomTo(selectedNode.parent.customId);\r\n    }\r\n  }\r\n\r\n  public getZoomLevel() {\r\n    const { selectedNode } = this.state;\r\n    return selectedNode.depth;\r\n  }\r\n}\r\n\r\nexport default TreeMap;\r\n","export { default } from \"./TreeMap\"\nexport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\""],"sourceRoot":""}