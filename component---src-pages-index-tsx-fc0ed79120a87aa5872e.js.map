{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/App/App.tsx","webpack:///./src/data/data.ts","webpack:///./src/data/data.1.level.ts","webpack:///./src/components/TreeMap/ITreeMapProps.ts","webpack:///./src/components/Node/Node.tsx","webpack:///./src/components/Breadcrumb/Breadcrumb.tsx","webpack:///./src/utils/Utils.ts","webpack:///./src/components/TreeMap/TreeMap.tsx","webpack:///./src/components/TreeMap/index.ts"],"names":["App","props","state","data","data1","treeMapRef","React","render","width","height","ref","id","valueUnit","colorModel","ColorModel","OneEachChildren","className","nodeClassName","svgClassName","paddingInner","customD3ColorScale","scaleSequential","chromatic","onClick","setState","data2","current","resetZoom","zoomOut","console","log","getZoomLevel","hot","module","name","children","link","value","getNumberItemsWidthByNumberOfChars","fontSize","numberOfChars","LabelNewLine","label","textColor","hasChildren","fullLabel","fill","dx","dy","split","concat","map","item","index","key","x","NumberOfItemsRect","nodeTotalNodes","itemsWidth","toString","length","itemsHeight","strokeDasharrayTotal","y","stroke","strokeDasharray","textAnchor","Node","bgColor","globalTotalNodes","hideNumberOfChildren","isSelectedNode","treemapId","url","x0","x1","xScaleFactor","xScaleFunction","xTranslated","y0","y1","yScaleFactor","yScaleFunction","yTranslated","zoomEnabled","style","currentXTranslated","undefined","currentYTranslated","currentWidth","currentHeight","cursor","showNumberOfItems","clipWidth","Math","max","transform","classnames","href","target","clipPath","Breadcrumb","items","ev","text","Utils","getTopChildren","getTopSubParent","node","parent","this","customId","getDepth","obj","depth","forEach","d","tmpDepth","getRGBColor","color","r","g","b","actualColor","Array","isArray","pop","ret","replace","parseInt","getHighContrastColor","c","i","pow","getHighContrastColorFromString","backgroundColor","rgbColor","TreeMap","_onBreadcrumbItemClicked","_zoomTo","_onNodeClick","currentTarget","namePropInData","_createD3TreeMap","scaleLinear","range","breadCrumbItems","selectedId","scopedNodes","_nodes","selectedNode","_treemap","_rootData","totalNodes","selectedNodeTotalNodes","componentWillReceiveProps","nextProps","svgStyle","childrenPropInData","breadCrumbClassName","disableBreadcrumb","reactNodes","iterateAllChildren","mainNode","level","_getNode","hasOwnProperty","element","valuePropInData","valueFormat","d3treemap","size","tile","d3TreemapSquarify","paddingOuter","paddingTop","round","d3hierarchy","sum","s","sort","a","numberItemId","each","descendants","_valueFormatFunction","format","Depth","Value","extent","n","NumberOfChildren","_nodesbgColorFunction","domain","hideValue","nodeStyle","linkPropInData","nodeClassNameFromData","formattedValue","_getColorsFromNode","originalBackgroundColor","filter","nodeId","currentNodeArray","currentNode","path","warn","defaultProps"],"mappings":"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","file":"component---src-pages-index-tsx-fc0ed79120a87aa5872e.js","sourcesContent":["import App from \"../App\";\r\nexport default App;\r\n","import \"./App.css\";\r\n\r\nimport ContainerDimensions from \"react-container-dimensions\";\r\nimport { scaleSequential } from \"d3-scale\";\r\nimport * as chromatic from \"d3-scale-chromatic\";\r\nimport { hot } from \"react-hot-loader\";\r\n\r\nimport * as React from \"react\";\r\nimport { data as data1 } from \"../data/data\";\r\nimport { data as data2 } from \"../data/data.1.level\";\r\nimport TreeMap, { ColorModel } from \"../components/TreeMap\";\r\n\r\ninterface TreeMapInPutData {\r\n  name: string;\r\n  value?: number;\r\n  children?: Array<TreeMapInPutData>;\r\n  className?: string;\r\n}\r\n\r\nclass App extends React.Component<{}, { data: TreeMapInPutData }> {\r\n  private treeMapRef: React.RefObject<TreeMap<TreeMapInPutData>>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data1\r\n    };\r\n    this.treeMapRef = React.createRef();\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ContainerDimensions>\r\n          {({ width, height }) => (\r\n            <TreeMap<TreeMapInPutData>\r\n              ref={this.treeMapRef}\r\n              id=\"myTreeMap\"\r\n              width={width}\r\n              height={400}\r\n              data={this.state.data}\r\n              valueUnit={\"MB\"}\r\n              colorModel={ColorModel.OneEachChildren}\r\n              className=\"AppTreeMap\"\r\n              nodeClassName=\"AppTreeMap__node\"\r\n              svgClassName=\"AppTreeMap__svg\"\r\n              paddingInner={2}\r\n              customD3ColorScale={scaleSequential(\r\n                chromatic.interpolateSpectral\r\n              )}\r\n              // svgStyle={{fontFamily: \"'Courier New', Courier, monospace\"}}\r\n              // nodeStyle={{fill: \"black\", stroke: \"white\"}}\r\n              // disableBreadcrumb={true}\r\n              // hideNumberOfChildren={true}\r\n              // hideValue={true}\r\n            />\r\n          )}\r\n        </ContainerDimensions>\r\n        <div>\r\n          <a onClick={() => this.setState({ data: data2 })}>Change data</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.resetZoom()}>Zoom Reset</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.zoomOut()}>Zoom out</a>\r\n        </div>\r\n        <div>\r\n          <a\r\n            onClick={() => console.log(this.treeMapRef.current.getZoomLevel())}\r\n          >\r\n            Zoom level\r\n          </a>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(App);\r\n","// Format\r\n// name: name of the file or folder\r\n// type: folder or file\r\n// value: number of bytes of the doc (calculated at folder level by d3)\r\n// children: sub files or sub folders\r\n\r\nexport const data = {\r\n  name: \"flare\",\r\n  children: [\r\n    {\r\n      name: \"analytics\",\r\n      className: \"AppTreeMap__analytics\",\r\n      link: \"https://blog.josequinto.com\",\r\n      children: [\r\n        {\r\n          name: \"cluster\",\r\n          children: [\r\n            {\r\n              name: \"AgglomerativeCluster\",\r\n              value: 3938,\r\n              link: \"https://blog.josequinto.com\"\r\n            },\r\n            { name: \"CommunityStructure\", value: 3812 },\r\n            { name: \"HierarchicalCluster\", value: 6714 },\r\n            { name: \"MergeEdge\", value: 743 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"graph\",\r\n          children: [\r\n            { name: \"BetweennessCentrality\", value: 3534 },\r\n            { name: \"LinkDistance\", value: 5731 },\r\n            { name: \"MaxFlowMinCut\", value: 7840 },\r\n            { name: \"ShortestPaths\", value: 5914 },\r\n            { name: \"SpanningTree\", value: 3416 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"optimization\",\r\n          children: [{ name: \"AspectRatioBanker\", value: 7074 }]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: \"animate\",\r\n      children: [\r\n        { name: \"Easing\", value: 17010 },\r\n        { name: \"FunctionSequence\", value: 5842 },\r\n        {\r\n          name: \"interpolate\",\r\n          children: [\r\n            { name: \"ArrayInterpolator\", value: 1983 },\r\n            { name: \"ColorInterpolator\", value: 2047 },\r\n            { name: \"DateInterpolator\", value: 1375 },\r\n            { name: \"Interpolator\", value: 8746 },\r\n            { name: \"MatrixInterpolator\", value: 2202 },\r\n            { name: \"NumberInterpolator\", value: 1382 },\r\n            { name: \"ObjectInterpolator\", value: 1629 },\r\n            { name: \"PointInterpolator\", value: 1675 },\r\n            { name: \"RectangleInterpolator\", value: 2042 }\r\n          ]\r\n        },\r\n        { name: \"ISchedulable\", value: 1041 },\r\n        { name: \"Parallel\", value: 5176 },\r\n        { name: \"Pause\", value: 449 },\r\n        { name: \"Scheduler\", value: 5593 },\r\n        { name: \"Sequence\", value: 5534 },\r\n        { name: \"Transition\", value: 9201 },\r\n        { name: \"Transitioner\", value: 19975 },\r\n        { name: \"TransitionEvent\", value: 1116 },\r\n        { name: \"Tween\", value: 6006 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"data\",\r\n      children: [\r\n        {\r\n          name: \"converters\",\r\n          children: [\r\n            { name: \"Converters\", value: 721 },\r\n            { name: \"DelimitedTextConverter\", value: 4294 },\r\n            { name: \"GraphMLConverter\", value: 9800 },\r\n            { name: \"IDataConverter\", value: 1314 },\r\n            { name: \"JSONConverter\", value: 2220 }\r\n          ]\r\n        },\r\n        { name: \"DataField\", value: 1759 },\r\n        { name: \"DataSchema\", value: 2165 },\r\n        { name: \"DataSet\", value: 586 },\r\n        { name: \"DataSource\", value: 3331 },\r\n        { name: \"DataTable\", value: 772 },\r\n        { name: \"DataUtil\", value: 3322 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"display\",\r\n      children: [\r\n        { name: \"DirtySprite\", value: 8833 },\r\n        { name: \"LineSprite\", value: 1732 },\r\n        { name: \"RectSprite\", value: 3623 },\r\n        { name: \"TextSprite\", value: 10066 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"flex\",\r\n      children: [{ name: \"FlareVis\", value: 4116 }]\r\n    },\r\n    {\r\n      name: \"physics\",\r\n      children: [\r\n        { name: \"DragForce\", value: 1082 },\r\n        { name: \"GravityForce\", value: 1336 },\r\n        { name: \"IForce\", value: 319 },\r\n        { name: \"NBodyForce\", value: 10498 },\r\n        { name: \"Particle\", value: 2822 },\r\n        { name: \"Simulation\", value: 9983 },\r\n        { name: \"Spring\", value: 2213 },\r\n        { name: \"SpringForce\", value: 1681 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"query\",\r\n      children: [\r\n        { name: \"AggregateExpression\", value: 1616 },\r\n        { name: \"And\", value: 1027 },\r\n        { name: \"Arithmetic\", value: 3891 },\r\n        { name: \"Average\", value: 891 },\r\n        { name: \"BinaryExpression\", value: 2893 },\r\n        { name: \"Comparison\", value: 5103 },\r\n        { name: \"CompositeExpression\", value: 3677 },\r\n        { name: \"Count\", value: 781 },\r\n        { name: \"DateUtil\", value: 4141 },\r\n        { name: \"Distinct\", value: 933 },\r\n        { name: \"Expression\", value: 5130 },\r\n        { name: \"ExpressionIterator\", value: 3617 },\r\n        { name: \"Fn\", value: 3240 },\r\n        { name: \"If\", value: 2732 },\r\n        { name: \"IsA\", value: 2039 },\r\n        { name: \"Literal\", value: 1214 },\r\n        { name: \"Match\", value: 3748 },\r\n        { name: \"Maximum\", value: 843 },\r\n        {\r\n          name: \"methods\",\r\n          children: [\r\n            { name: \"add\", value: 593 },\r\n            { name: \"and\", value: 330 },\r\n            { name: \"average\", value: 287 },\r\n            { name: \"count\", value: 277 },\r\n            { name: \"distinct\", value: 292 },\r\n            { name: \"div\", value: 595 },\r\n            { name: \"eq\", value: 594 },\r\n            { name: \"fn\", value: 460 },\r\n            { name: \"gt\", value: 603 },\r\n            { name: \"gte\", value: 625 },\r\n            { name: \"iff\", value: 748 },\r\n            { name: \"isa\", value: 461 },\r\n            { name: \"lt\", value: 597 },\r\n            { name: \"lte\", value: 619 },\r\n            { name: \"max\", value: 283 },\r\n            { name: \"min\", value: 283 },\r\n            { name: \"mod\", value: 591 },\r\n            { name: \"mul\", value: 603 },\r\n            { name: \"neq\", value: 599 },\r\n            { name: \"not\", value: 386 },\r\n            { name: \"or\", value: 323 },\r\n            { name: \"orderby\", value: 307 },\r\n            { name: \"range\", value: 772 },\r\n            { name: \"select\", value: 296 },\r\n            { name: \"stddev\", value: 363 },\r\n            { name: \"sub\", value: 600 },\r\n            { name: \"sum\", value: 280 },\r\n            { name: \"update\", value: 307 },\r\n            { name: \"variance\", value: 335 },\r\n            { name: \"where\", value: 299 },\r\n            { name: \"xor\", value: 354 },\r\n            { name: \"_\", value: 264 }\r\n          ]\r\n        },\r\n        { name: \"Minimum\", value: 843 },\r\n        { name: \"Not\", value: 1554 },\r\n        { name: \"Or\", value: 970 },\r\n        { name: \"Query\", value: 13896 },\r\n        { name: \"Range\", value: 1594 },\r\n        { name: \"StringUtil\", value: 4130 },\r\n        { name: \"Sum\", value: 791 },\r\n        { name: \"Variable\", value: 1124 },\r\n        { name: \"Variance\", value: 1876 },\r\n        { name: \"Xor\", value: 1101 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"scale\",\r\n      children: [\r\n        { name: \"IScaleMap\", value: 2105 },\r\n        { name: \"LinearScale\", value: 1316 },\r\n        { name: \"LogScale\", value: 3151 },\r\n        { name: \"OrdinalScale\", value: 3770 },\r\n        { name: \"QuantileScale\", value: 2435 },\r\n        { name: \"QuantitativeScale\", value: 4839 },\r\n        { name: \"RootScale\", value: 1756 },\r\n        { name: \"Scale\", value: 4268 },\r\n        { name: \"ScaleType\", value: 1821 },\r\n        { name: \"TimeScale\", value: 5833 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"util\",\r\n      children: [\r\n        { name: \"Arrays\", value: 8258 },\r\n        { name: \"Colors\", value: 10001 },\r\n        { name: \"Dates\", value: 8217 },\r\n        { name: \"Displays\", value: 12555 },\r\n        { name: \"Filter\", value: 2324 },\r\n        { name: \"Geometry\", value: 10993 },\r\n        {\r\n          name: \"heap\",\r\n          children: [\r\n            { name: \"FibonacciHeap\", value: 9354 },\r\n            { name: \"HeapNode\", value: 1233 }\r\n          ]\r\n        },\r\n        { name: \"IEvaluable\", value: 335 },\r\n        { name: \"IPredicate\", value: 383 },\r\n        { name: \"IValueProxy\", value: 874 },\r\n        {\r\n          name: \"math\",\r\n          children: [\r\n            { name: \"DenseMatrix\", value: 3165 },\r\n            { name: \"IMatrix\", value: 2815 },\r\n            { name: \"SparseMatrix\", value: 3366 }\r\n          ]\r\n        },\r\n        { name: \"Maths\", value: 17705 },\r\n        { name: \"Orientation\", value: 1486 },\r\n        {\r\n          name: \"palette\",\r\n          children: [\r\n            { name: \"ColorPalette\", value: 6367 },\r\n            { name: \"Palette\", value: 1229 },\r\n            { name: \"ShapePalette\", value: 2059 },\r\n            { name: \"SizePalette\", value: 2291 }\r\n          ]\r\n        },\r\n        { name: \"Property\", value: 5559 },\r\n        { name: \"Shapes\", value: 19118 },\r\n        { name: \"Sort\", value: 6887 },\r\n        { name: \"Stats\", value: 6557 },\r\n        { name: \"Strings\", value: 22026 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"vis\",\r\n      children: [\r\n        {\r\n          name: \"axis\",\r\n          children: [\r\n            { name: \"Axes\", value: 1302 },\r\n            { name: \"Axis\", value: 24593 },\r\n            { name: \"AxisGridLine\", value: 652 },\r\n            { name: \"AxisLabel\", value: 636 },\r\n            { name: \"CartesianAxes\", value: 6703 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"controls\",\r\n          children: [\r\n            { name: \"AnchorControl\", value: 2138 },\r\n            { name: \"ClickControl\", value: 3824 },\r\n            { name: \"Control\", value: 1353 },\r\n            { name: \"ControlList\", value: 4665 },\r\n            { name: \"DragControl\", value: 2649 },\r\n            { name: \"ExpandControl\", value: 2832 },\r\n            { name: \"HoverControl\", value: 4896 },\r\n            { name: \"IControl\", value: 763 },\r\n            { name: \"PanZoomControl\", value: 5222 },\r\n            { name: \"SelectionControl\", value: 7862 },\r\n            { name: \"TooltipControl\", value: 8435 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"data\",\r\n          children: [\r\n            { name: \"Data\", value: 20544 },\r\n            { name: \"DataList\", value: 19788 },\r\n            { name: \"DataSprite\", value: 10349 },\r\n            { name: \"EdgeSprite\", value: 3301 },\r\n            { name: \"NodeSprite\", value: 19382 },\r\n            {\r\n              name: \"render\",\r\n              children: [\r\n                { name: \"ArrowType\", value: 698 },\r\n                { name: \"EdgeRenderer\", value: 5569 },\r\n                { name: \"IRenderer\", value: 353 },\r\n                { name: \"ShapeRenderer\", value: 2247 }\r\n              ]\r\n            },\r\n            { name: \"ScaleBinding\", value: 11275 },\r\n            { name: \"Tree\", value: 7147 },\r\n            { name: \"TreeBuilder\", value: 9930 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"events\",\r\n          children: [\r\n            { name: \"DataEvent\", value: 2313 },\r\n            { name: \"SelectionEvent\", value: 1880 },\r\n            { name: \"TooltipEvent\", value: 1701 },\r\n            { name: \"VisualizationEvent\", value: 1117 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"legend\",\r\n          children: [\r\n            { name: \"Legend\", value: 20859 },\r\n            { name: \"LegendItem\", value: 4614 },\r\n            { name: \"LegendRange\", value: 10530 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"operator\",\r\n          children: [\r\n            {\r\n              name: \"distortion\",\r\n              children: [\r\n                { name: \"BifocalDistortion\", value: 4461 },\r\n                { name: \"Distortion\", value: 6314 },\r\n                { name: \"FisheyeDistortion\", value: 3444 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"encoder\",\r\n              children: [\r\n                { name: \"ColorEncoder\", value: 3179 },\r\n                { name: \"Encoder\", value: 4060 },\r\n                { name: \"PropertyEncoder\", value: 4138 },\r\n                { name: \"ShapeEncoder\", value: 1690 },\r\n                { name: \"SizeEncoder\", value: 1830 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"filter\",\r\n              children: [\r\n                { name: \"FisheyeTreeFilter\", value: 5219 },\r\n                { name: \"GraphDistanceFilter\", value: 3165 },\r\n                { name: \"VisibilityFilter\", value: 3509 }\r\n              ]\r\n            },\r\n            { name: \"IOperator\", value: 1286 },\r\n            {\r\n              name: \"label\",\r\n              children: [\r\n                { name: \"Labeler\", value: 9956 },\r\n                { name: \"RadialLabeler\", value: 3899 },\r\n                { name: \"StackedAreaLabeler\", value: 3202 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"layout\",\r\n              children: [\r\n                { name: \"AxisLayout\", value: 6725 },\r\n                { name: \"BundledEdgeRouter\", value: 3727 },\r\n                { name: \"CircleLayout\", value: 9317 },\r\n                { name: \"CirclePackingLayout\", value: 12003 },\r\n                { name: \"DendrogramLayout\", value: 4853 },\r\n                { name: \"ForceDirectedLayout\", value: 8411 },\r\n                { name: \"IcicleTreeLayout\", value: 4864 },\r\n                { name: \"IndentedTreeLayout\", value: 3174 },\r\n                { name: \"Layout\", value: 7881 },\r\n                { name: \"NodeLinkTreeLayout\", value: 12870 },\r\n                { name: \"PieLayout\", value: 2728 },\r\n                { name: \"RadialTreeLayout\", value: 12348 },\r\n                { name: \"RandomLayout\", value: 870 },\r\n                { name: \"StackedAreaLayout\", value: 9121 },\r\n                { name: \"TreeMapLayout\", value: 9191 }\r\n              ]\r\n            },\r\n            { name: \"Operator\", value: 2490 },\r\n            { name: \"OperatorList\", value: 5248 },\r\n            { name: \"OperatorSequence\", value: 4190 },\r\n            { name: \"OperatorSwitch\", value: 2581 },\r\n            { name: \"SortOperator\", value: 2023 }\r\n          ]\r\n        },\r\n        { name: \"Visualization\", value: 16540 }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n","export const data = {\r\n  name: \"Documents\",\r\n  children: [\r\n    {\r\n      name: \"AgglomerativeCluster\",\r\n      value: 3938,\r\n      link: \"https://blog.josequinto.com\"\r\n    },\r\n    { name: \"CommunityStructure\", value: 3812 },\r\n    { name: \"HierarchicalCluster\", value: 6714 },\r\n    { name: \"MergeEdge\", value: 743 }\r\n  ]\r\n};\r\n","import { ScaleSequential } from \"d3-scale\";\r\n\r\nexport interface ITreeMapProps<TreeMapInputData> {\r\n  /**\r\n   * TreeMap id, will be use for create customId for each node\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * TreeMap width\r\n   */\r\n  width: number;\r\n\r\n  /**\r\n   * TreeMap height\r\n   */\r\n  height: number;\r\n\r\n  /**\r\n   * TreeMap data. Normally should have at least name, value and children.\r\n   *\r\n   * Example:\r\n   *  interface TreeMapInPutData {\r\n   *      name: string;\r\n   *      value?: number;\r\n   *      children?: Array<TreeMapInPutData>;\r\n   *      className?: string;\r\n   *  }\r\n   */\r\n  data: TreeMapInputData;\r\n\r\n  /*\r\n        Unit for values. For example MB\r\n    */\r\n  valueUnit?: string;\r\n\r\n  /*\r\n   * Format for the values\r\n   * https://github.com/d3/d3-format#format\r\n   */\r\n  valueFormat?: string;\r\n\r\n  /**\r\n   * Hide breadcrumb.\r\n   *\r\n   * If you app doesn't use breadcrumb, you can pass down a ref\r\n   * and use the methods: zoomOut, resetZoom\r\n   */\r\n  disableBreadcrumb?: boolean;\r\n\r\n  /**\r\n   * There are few color strategies for nodes:\r\n   *    Depth: different color per depth\r\n   *    Value: different color depends on how big / small is the value\r\n   *    NumberOfChildren: different color depends on how many children node has\r\n   *    OneEachChildren: one color per each top children, then range of colors from white to that one\r\n   */\r\n  colorModel?: ColorModel;\r\n\r\n  /**\r\n   * Don't show the top right corner box indicating number of children\r\n   */\r\n  hideNumberOfChildren?: boolean;\r\n\r\n  /**\r\n   * Don't show the value\r\n   */\r\n  hideValue?: boolean;\r\n\r\n  /**\r\n   * Overrides top div main class\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Overrides svg class\r\n   */\r\n  svgClassName?: string;\r\n\r\n  /**\r\n   * Overrides node class\r\n   */\r\n  nodeClassName?: string;\r\n\r\n  /**\r\n   * Overrides breadcrumb class\r\n   */\r\n  breadCrumbClassName?: string;\r\n\r\n  /**\r\n   * Overrides svg style\r\n   */\r\n  svgStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Overrides node style\r\n   */\r\n  nodeStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Padding between nodes ( calculated by D3 )\r\n   */\r\n  paddingInner?: number;\r\n\r\n  /**\r\n   * Custom ScaleSequential from D3\r\n   */\r\n  customD3ColorScale?: ScaleSequential<string>;\r\n\r\n  /**\r\n   * Name for the property `name` included in data\r\n   *\r\n   * @default \"name\"\r\n   */\r\n  namePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `link` included in data\r\n   *\r\n   * @default \"link\"\r\n   */\r\n  linkPropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `value` included in data\r\n   *\r\n   * @default \"value\"\r\n   */\r\n  valuePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `children` included in data\r\n   *\r\n   * @default \"children\"\r\n   */\r\n  childrenPropInData?: string;\r\n}\r\n\r\nexport enum ColorModel {\r\n  Depth,\r\n  Value,\r\n  NumberOfChildren,\r\n  OneEachChildren\r\n}\r\n","import \"./Node.css\";\r\n\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\n\r\nexport interface NodeProps {\r\n  /*\r\n        HierarchyRectangularNode properties\r\n    */\r\n  x0?: number;\r\n  y0?: number;\r\n  x1?: number;\r\n  y1?: number;\r\n\r\n  bgColor: string;\r\n  className?: string;\r\n  fontSize: number;\r\n  globalTotalNodes: number;\r\n  hasChildren: boolean;\r\n  height?: number;\r\n  hideNumberOfChildren?: boolean;\r\n  id: number;\r\n  isSelectedNode: boolean;\r\n  label: string;\r\n  name: string;\r\n  nodeTotalNodes: number;\r\n  onClick?: any;\r\n  style?: React.CSSProperties;\r\n  textColor: string;\r\n  treemapId?: string;\r\n  url: string;\r\n  value: string;\r\n  width?: number;\r\n  xScaleFactor?: number;\r\n  xScaleFunction?: any;\r\n  xTranslated?: number;\r\n  yScaleFactor?: number;\r\n  yScaleFunction?: any;\r\n  yTranslated?: number;\r\n  zoomEnabled?: boolean;\r\n}\r\n\r\nconst getNumberItemsWidthByNumberOfChars = (\r\n  fontSize: number,\r\n  numberOfChars: number\r\n) => {\r\n  return (fontSize / 2) * numberOfChars + 5;\r\n};\r\n\r\nconst LabelNewLine = ({ label, textColor, fontSize, value, hasChildren }) => {\r\n  if (!label) {\r\n    return null;\r\n  }\r\n\r\n  if (hasChildren === true) {\r\n    const fullLabel = value ? `${label}\\xa0${value}` : label;\r\n    return (\r\n      <tspan fontSize={fontSize} fill={textColor} dx={4} dy={fontSize}>\r\n        {fullLabel}\r\n      </tspan>\r\n    );\r\n  } else {\r\n    const fullLabel = value\r\n      ? label.split(/(?=[A-Z][^A-Z])/g).concat(value)\r\n      : label.split(/(?=[A-Z][^A-Z])/g);\r\n    return fullLabel.map((item, index) => {\r\n      return (\r\n        <tspan\r\n          fontSize={fontSize}\r\n          fill={textColor}\r\n          key={index}\r\n          x={4}\r\n          dy={fontSize}\r\n        >\r\n          {item}\r\n        </tspan>\r\n      );\r\n    });\r\n  }\r\n};\r\n\r\nconst NumberOfItemsRect = ({\r\n  name,\r\n  width,\r\n  height,\r\n  fontSize,\r\n  textColor,\r\n  nodeTotalNodes\r\n}) => {\r\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\r\n    fontSize,\r\n    nodeTotalNodes.toString().length\r\n  );\r\n  const itemsHeight = fontSize;\r\n  const strokeDasharrayTotal = itemsWidth + itemsHeight;\r\n  if (width > itemsWidth && height > itemsHeight) {\r\n    return (\r\n      <g>\r\n        <rect\r\n          id={`rectNumberItems-${name}`}\r\n          x={width - itemsWidth}\r\n          y={0}\r\n          width={itemsWidth}\r\n          height={itemsHeight + 2}\r\n          fill=\"none\"\r\n          stroke={textColor}\r\n          strokeDasharray={`0,${strokeDasharrayTotal},${strokeDasharrayTotal}`}\r\n        />\r\n        <text\r\n          fontSize={fontSize}\r\n          fill={textColor}\r\n          x={width - itemsWidth + itemsWidth / 2}\r\n          y={itemsHeight}\r\n          textAnchor=\"middle\"\r\n        >\r\n          {nodeTotalNodes}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Node: React.FunctionComponent<NodeProps> = ({\r\n  bgColor,\r\n  className,\r\n  fontSize,\r\n  globalTotalNodes,\r\n  hasChildren,\r\n  height,\r\n  hideNumberOfChildren,\r\n  id,\r\n  isSelectedNode,\r\n  label,\r\n  nodeTotalNodes,\r\n  onClick,\r\n  textColor,\r\n  treemapId,\r\n  url,\r\n  value,\r\n  width,\r\n  x0,\r\n  x1,\r\n  xScaleFactor,\r\n  xScaleFunction,\r\n  xTranslated,\r\n  y0,\r\n  y1,\r\n  yScaleFactor,\r\n  yScaleFunction,\r\n  yTranslated,\r\n  zoomEnabled,\r\n  style\r\n}) => {\r\n  const currentXTranslated =\r\n    xTranslated !== undefined\r\n      ? xTranslated\r\n      : zoomEnabled === true\r\n      ? xScaleFunction(x0)\r\n      : x0;\r\n  const currentYTranslated =\r\n    yTranslated !== undefined\r\n      ? yTranslated\r\n      : zoomEnabled === true\r\n      ? yScaleFunction(y0)\r\n      : y0;\r\n  const currentWidth = width !== undefined ? width : xScaleFactor * (x1 - x0);\r\n  const currentHeight =\r\n    height !== undefined ? height : yScaleFactor * (y1 - y0);\r\n\r\n  const cursor =\r\n    hasChildren === true && isSelectedNode === false ? \"pointer\" : \"auto\";\r\n\r\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\r\n    fontSize,\r\n    nodeTotalNodes.toString().length\r\n  );\r\n  const showNumberOfItems = !hideNumberOfChildren && hasChildren;\r\n\r\n  const clipWidth = Math.max(\r\n    0,\r\n    showNumberOfItems ? currentWidth - itemsWidth : currentWidth\r\n  );\r\n\r\n  return (\r\n    <g\r\n      transform={`translate(${currentXTranslated},${currentYTranslated})`}\r\n      id={`${id}`}\r\n      onClick={hasChildren ? onClick : null}\r\n      style={{ cursor }}\r\n    >\r\n      <rect\r\n        id={`rect-${id}`}\r\n        width={currentWidth}\r\n        height={currentHeight}\r\n        className={classnames(\"Node\", className)}\r\n        style={{\r\n          fill: bgColor,\r\n          stroke: textColor,\r\n          ...style\r\n        }}\r\n      />\r\n      <clipPath id={`clip-${treemapId}-${id}`}>\r\n        <rect width={clipWidth} height={currentHeight} />\r\n      </clipPath>\r\n      <a href={url} target=\"_blank\">\r\n        <text clipPath={`url(#clip-${treemapId}-${id})`}>\r\n          <LabelNewLine\r\n            label={label}\r\n            textColor={textColor}\r\n            fontSize={fontSize}\r\n            value={value}\r\n            hasChildren={hasChildren}\r\n          />\r\n        </text>\r\n      </a>\r\n      {showNumberOfItems && (\r\n        <NumberOfItemsRect\r\n          name={name}\r\n          width={currentWidth}\r\n          height={currentHeight}\r\n          fontSize={fontSize}\r\n          textColor={textColor}\r\n          nodeTotalNodes={nodeTotalNodes}\r\n        />\r\n      )}\r\n      <title>\r\n        {`${label}\\n${value}\\n${nodeTotalNodes}/${globalTotalNodes}`}\r\n      </title>\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","import \"./Breadcrumb.css\";\n\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nexport interface IBreadcrumbProps {\n  /**\n   * Collection of breadcrumbs to render\n   */\n  items: IBreadcrumbItem[];\n  className?: string;\n}\n\nexport interface IBreadcrumbItem {\n  /**\n   * Text to display to the user for the breadcrumb\n   */\n  text: string;\n  /**\n   * Arbitrary unique string associated with the breadcrumb\n   */\n  key: string;\n  /**\n   * Callback issued when the breadcrumb is selected.\n   */\n  onClick?: (\n    ev?: React.MouseEvent<HTMLElement>,\n    item?: IBreadcrumbItem\n  ) => void;\n  /**\n   * Url to navigate to when this breadcrumb is clicked.\n   */\n  href?: string;\n}\n\nexport const Breadcrumb: React.FunctionComponent<IBreadcrumbProps> = ({\n  className,\n  items\n}) => {\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <div className={classnames(\"TreeMap__breadcrumb\", className)}>\n      {items.map((item: IBreadcrumbItem, index: number) => (\n        <div key={index}>\n          <a\n            className=\"TreeMap__breadcrumbItem\"\n            id={item.key}\n            key={item.key}\n            onClick={item.onClick ? ev => item.onClick(ev, item) : undefined}\n            href={item.href}\n          >\n            {item.text}\n          </a>\n          {index < items.length - 1 ? <span className=\"TreeMap__breadcrumbSeparator\">/</span> : null}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { CustomHierarchyRectangularNode } from \"../components/TreeMap/TreeMap\";\n\nexport class Utils {\n  public static getTopChildren(data: any) {\n    return data.children ? data.children.length : 0;\n  }\n\n  public static getTopSubParent<TreeMapInputData>(\n    node: CustomHierarchyRectangularNode<TreeMapInputData>\n  ): number {\n    if (node.parent && node.parent.parent) {\n      return this.getTopSubParent(node.parent);\n    }\n    return node.customId;\n  }\n\n  public static getDepth(obj: any) {\n    let depth = 0;\n    if (obj.children) {\n      obj.children.forEach((d: any) => {\n        const tmpDepth = this.getDepth(d);\n        if (tmpDepth > depth) {\n          depth = tmpDepth;\n        }\n      });\n    }\n    return 1 + depth;\n  }\n\n  public static getRGBColor(color: string | Array<string>) {\n    if (!color) {\n      return {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n    }\n    const actualColor = Array.isArray(color) ? color.pop() : color;\n\n    if (actualColor === \"white\" || actualColor === \"papayawhip\") {\n      return {\n        r: 255,\n        g: 255,\n        b: 255\n      };\n    }\n    if (actualColor === \"black\") {\n      return {\n        r: 0,\n        g: 0,\n        b: 0\n      };\n    }\n    // format: \"rgb(254, 214, 118)\"\n    const ret = actualColor.replace(/[^\\d,]/g, \"\").split(\",\");\n    if (ret && ret.length === 3) {\n      return {\n        r: parseInt(ret[0], 10),\n        g: parseInt(ret[1], 10),\n        b: parseInt(ret[2], 10)\n      };\n    }\n  }\n\n  public static getHighContrastColor(r: number, g: number, b: number) {\n    // based on\n    // http://stackoverflow.com/questions/407793/programmatically-choose-high-contrast-colors\n    // http://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color\n    const c = [r / 255, g / 255, b / 255];\n    for (let i = 0; i < c.length; ++i) {\n      if (c[i] <= 0.03928) {\n        c[i] = c[i] / 12.92;\n      } else {\n        c[i] = Math.pow((c[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n    const luminance = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    // return luminance > 0.179 ? \"black\" : \"white\";\n    return luminance > 0.4 ? \"black\" : \"white\";\n  }\n\n  public static getHighContrastColorFromString(\n    backgroundColor: string | undefined\n  ): string {\n    if (!backgroundColor) {\n      return \"black\";\n    }\n    const rgbColor = Utils.getRGBColor(backgroundColor);\n    if (rgbColor) {\n      // console.log(\"background: \" + backgroundColor);\n      // console.log(\"color: \" + Utils.getHighContrastColor(rgbColor.r, rgbColor.g, rgbColor.b));\n      return Utils.getHighContrastColor(rgbColor.r, rgbColor.g, rgbColor.b);\n    }\n  }\n}\n","import \"./TreeMap.css\";\r\n\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { format } from \"d3-format\";\r\nimport {\r\n  TreemapLayout,\r\n  HierarchyRectangularNode,\r\n  treemap as d3treemap,\r\n  hierarchy as d3hierarchy,\r\n  treemapSquarify as d3TreemapSquarify\r\n} from \"d3-hierarchy\";\r\nimport {\r\n  ScaleLinear,\r\n  scaleLinear,\r\n  ScaleSequential,\r\n  scaleSequential\r\n} from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport * as chromatic from \"d3-scale-chromatic\";\r\nimport { interpolateHcl } from \"d3-interpolate\";\r\n\r\nimport Node from \"../Node\";\r\nimport Breadcrumb, { IBreadcrumbItem } from \"../Breadcrumb\";\r\nimport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\";\r\nimport { ITreeMapState } from \"./ITreeMapState\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\nexport interface CustomHierarchyRectangularNode<TreeMapInputData>\r\n  extends HierarchyRectangularNode<TreeMapInputData> {\r\n  customId: number;\r\n}\r\n\r\nclass TreeMap<TreeMapInputData> extends React.Component<\r\n  ITreeMapProps<TreeMapInputData>,\r\n  ITreeMapState<TreeMapInputData>\r\n> {\r\n  // Default Props values\r\n  public static defaultProps: ITreeMapProps<{}> = {\r\n    id: \"myTreeMap\",\r\n    data: null,\r\n    height: 600,\r\n    width: 600,\r\n    valueFormat: \",d\",\r\n    valueUnit: \"MB\",\r\n    disableBreadcrumb: false,\r\n    colorModel: ColorModel.Depth,\r\n    paddingInner: 0,\r\n    customD3ColorScale: scaleSequential(chromatic.interpolateSpectral),\r\n    namePropInData: \"name\",\r\n    linkPropInData: \"link\",\r\n    valuePropInData: \"value\", // can be value, count, ...\r\n    childrenPropInData: \"children\"\r\n  };\r\n\r\n  // Note. This treemap element initially was using treemap and hierarchy directly on the render.\r\n  //       I noticed a performance problem when the original data \"this.props.data\" has more than 1500 elements.\r\n  //       Now, the component is designed to show only the first level of nodes and when click on one expand the rest.\r\n  private _treemap: TreemapLayout<TreeMapInputData>;\r\n  private _rootData: HierarchyRectangularNode<TreeMapInputData>;\r\n  private _nodes: Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n  // Numeric value format function\r\n  private _valueFormatFunction: (n: number) => string;\r\n  // Background Color function\r\n  private _nodesbgColorFunction:\r\n    | ScaleSequential<string>\r\n    | ScaleLinear<string, string>;\r\n\r\n  constructor(props: ITreeMapProps<TreeMapInputData>) {\r\n    super(props);\r\n\r\n    const { width, height, data, namePropInData } = props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    // Default State values\r\n    this.state = {\r\n      height: height,\r\n      width: width,\r\n      data: data,\r\n      xScaleFactor: 1,\r\n      yScaleFactor: 1,\r\n      xScaleFunction: scaleLinear().range([0, width]),\r\n      yScaleFunction: scaleLinear().range([0, height]),\r\n      zoomEnabled: false,\r\n      // TODO: Replace data.name by id\r\n      breadCrumbItems: [\r\n        {\r\n          text: data[namePropInData],\r\n          key: 0,\r\n          onClick: this._onBreadcrumbItemClicked\r\n        }\r\n      ],\r\n      selectedId: 0,\r\n      scopedNodes: this._nodes,\r\n      selectedNode: this._treemap(\r\n        this._rootData\r\n      ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      totalNodes: this._nodes.length,\r\n      selectedNodeTotalNodes: this._nodes.length\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: ITreeMapProps<TreeMapInputData>) {\r\n    const { width, height, data, namePropInData } = nextProps;\r\n\r\n    if (height !== this.props.height || width !== this.props.width) {\r\n      this.setState({\r\n        width,\r\n        height,\r\n        xScaleFunction: scaleLinear().range([0, width]),\r\n        yScaleFunction: scaleLinear().range([0, height])\r\n      });\r\n    }\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n    this.setState({\r\n      data,\r\n      width,\r\n      height,\r\n      xScaleFactor: 1,\r\n      yScaleFactor: 1,\r\n      xScaleFunction: scaleLinear().range([0, width]),\r\n      yScaleFunction: scaleLinear().range([0, height]),\r\n      zoomEnabled: false,\r\n      // TODO: Replace data.name by id\r\n      breadCrumbItems: [\r\n        {\r\n          text: data[namePropInData],\r\n          key: 0,\r\n          onClick: this._onBreadcrumbItemClicked\r\n        }\r\n      ],\r\n      selectedId: 0,\r\n      scopedNodes: this._nodes,\r\n      selectedNode: this._treemap(\r\n        this._rootData\r\n      ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      totalNodes: this._nodes.length,\r\n      selectedNodeTotalNodes: this._nodes.length\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    const { width, height, breadCrumbItems, selectedNode, data } = this.state;\r\n\r\n    const {\r\n      svgClassName,\r\n      svgStyle,\r\n      className,\r\n      childrenPropInData,\r\n      breadCrumbClassName,\r\n      disableBreadcrumb\r\n    } = this.props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    let reactNodes: Array<React.ReactNode> = [];\r\n    const maxLevel = 1;\r\n    const iterateAllChildren = (\r\n      mainNode: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      level: number\r\n    ) => {\r\n      reactNodes = reactNodes.concat(this._getNode(mainNode));\r\n      if (level < maxLevel) {\r\n        if (\r\n          mainNode.hasOwnProperty(childrenPropInData) &&\r\n          mainNode[childrenPropInData].length > 0\r\n        ) {\r\n          mainNode[childrenPropInData].forEach(element => {\r\n            iterateAllChildren(element, level + 1);\r\n          });\r\n        }\r\n      }\r\n    };\r\n    iterateAllChildren(selectedNode, 0);\r\n\r\n    return (\r\n      <div className={className}>\r\n        {disableBreadcrumb === false ? (\r\n          <Breadcrumb items={breadCrumbItems} className={breadCrumbClassName} />\r\n        ) : null}\r\n        <svg\r\n          className={classnames(\"TreeMap__mainSvg\", svgClassName)}\r\n          height={height}\r\n          width={width}\r\n          style={{ ...svgStyle }}\r\n        >\r\n          {reactNodes}\r\n        </svg>\r\n        {/*<div>Total items: {this.state.selectedNodeTotalNodes}  / {this.state.totalNodes}</div>*/}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _createD3TreeMap(\r\n    width: number,\r\n    height: number,\r\n    data: TreeMapInputData\r\n  ) {\r\n    const {\r\n      valuePropInData,\r\n      paddingInner,\r\n      valueFormat,\r\n      colorModel,\r\n      customD3ColorScale\r\n    } = this.props;\r\n\r\n    // 1. Create treemap structure\r\n    if (!this._treemap) {\r\n      this._treemap = d3treemap<TreeMapInputData>()\r\n        .size([width, height])\r\n        .tile(d3TreemapSquarify)\r\n        .paddingOuter(3)\r\n        .paddingTop(19)\r\n        .paddingInner(paddingInner)\r\n        .round(true);\r\n    }\r\n\r\n    // 2. Before compute a hierarchical layout, we need a root node\r\n    //    If the data is in JSON we use d3.hierarchy\r\n    if (!this._rootData) {\r\n      this._rootData = d3hierarchy(data)\r\n        .sum(s => s[valuePropInData])\r\n        .sort(\r\n          (a, b) =>\r\n            b.height - a.height || b[valuePropInData] - a[valuePropInData]\r\n        ) as HierarchyRectangularNode<TreeMapInputData>;\r\n    }\r\n\r\n    // 3. Get array of nodes\r\n    let numberItemId = 0;\r\n    this._nodes = this._treemap(this._rootData)\r\n      .each((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        item.customId = numberItemId++;\r\n      })\r\n      .descendants() as Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n    // Format function\r\n    this._valueFormatFunction = format(valueFormat);\r\n\r\n    let d: [number | { valueOf(): number }, number | { valueOf(): number }];\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        d = [0, Utils.getDepth(data) - 1];\r\n        break;\r\n      case ColorModel.Value:\r\n        d = extent(this._nodes, n => {\r\n          if (n.parent !== null) {\r\n            return n[valuePropInData];\r\n          }\r\n        });\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        d = extent(this._nodes, n =>\r\n          n.parent !== null ? n.descendants().length : 1\r\n        );\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        d = [Utils.getTopChildren(data), 0];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this._nodesbgColorFunction = customD3ColorScale.domain(d);\r\n  }\r\n\r\n  private _getNode(node: CustomHierarchyRectangularNode<TreeMapInputData>) {\r\n    const {\r\n      id: treemapId,\r\n      valueUnit,\r\n      hideValue,\r\n      hideNumberOfChildren,\r\n      nodeStyle,\r\n      nodeClassName,\r\n      valuePropInData,\r\n      childrenPropInData,\r\n      namePropInData,\r\n      linkPropInData\r\n    } = this.props;\r\n\r\n    const {\r\n      totalNodes,\r\n      selectedId,\r\n      xScaleFactor,\r\n      xScaleFunction,\r\n      yScaleFactor,\r\n      yScaleFunction,\r\n      zoomEnabled\r\n    } = this.state;\r\n\r\n    const name = node.data[namePropInData];\r\n    const id = node.customId;\r\n    const url = node.data[linkPropInData];\r\n    const nodeClassNameFromData = node.data[\"className\"];\r\n\r\n    const hasChildren =\r\n      node[childrenPropInData] && node[childrenPropInData].length > 0\r\n        ? true\r\n        : false;\r\n    const formattedValue = `(${this._valueFormatFunction(\r\n      node[valuePropInData]\r\n    )} ${valueUnit})`;\r\n    const nodeTotalNodes = node.descendants().length - 1;\r\n\r\n    const { bgColor, textColor } = this._getColorsFromNode(\r\n      node,\r\n      nodeTotalNodes\r\n    );\r\n\r\n    return (\r\n      <Node\r\n        bgColor={bgColor}\r\n        className={classnames(nodeClassName, nodeClassNameFromData)}\r\n        style={nodeStyle}\r\n        fontSize={14}\r\n        globalTotalNodes={totalNodes}\r\n        hasChildren={hasChildren}\r\n        hideNumberOfChildren={hideNumberOfChildren}\r\n        id={id}\r\n        isSelectedNode={id === selectedId}\r\n        key={id}\r\n        label={name}\r\n        name={name}\r\n        nodeTotalNodes={nodeTotalNodes}\r\n        onClick={this._onNodeClick}\r\n        textColor={textColor}\r\n        treemapId={treemapId}\r\n        url={url}\r\n        value={!hideValue && formattedValue}\r\n        x0={node.x0}\r\n        x1={node.x1}\r\n        xScaleFactor={xScaleFactor}\r\n        xScaleFunction={xScaleFunction}\r\n        y0={node.y0}\r\n        y1={node.y1}\r\n        yScaleFactor={yScaleFactor}\r\n        yScaleFunction={yScaleFunction}\r\n        zoomEnabled={zoomEnabled}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onBreadcrumbItemClicked = (\r\n    ev: React.MouseEvent<HTMLElement>,\r\n    item: IBreadcrumbItem\r\n  ) => {\r\n    this._zoomTo(parseInt(item.key));\r\n  };\r\n\r\n  private _onNodeClick = (ev: React.MouseEvent<HTMLElement>) => {\r\n    this._zoomTo(parseInt(ev.currentTarget.id));\r\n  };\r\n\r\n  private _getColorsFromNode(\r\n    node: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n    nodeTotalNodes: number\r\n  ) {\r\n    const { colorModel, valuePropInData } = this.props;\r\n\r\n    let backgroundColor;\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        backgroundColor = this._nodesbgColorFunction(node.depth);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n        break;\r\n      case ColorModel.Value:\r\n        backgroundColor = this._nodesbgColorFunction(node[valuePropInData]);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        backgroundColor = this._nodesbgColorFunction(nodeTotalNodes);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        const originalBackgroundColor = this._nodesbgColorFunction(\r\n          Utils.getTopSubParent<TreeMapInputData>(node)\r\n        );\r\n        if (node.depth > 1) {\r\n          backgroundColor = scaleLinear<string>()\r\n            .domain([0, node && node.children ? node.children.length : 1])\r\n            .range([\"white\", originalBackgroundColor])(\r\n            Utils.getTopSubParent<TreeMapInputData>(node)\r\n          );\r\n        } else {\r\n          backgroundColor = originalBackgroundColor;\r\n        }\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return {\r\n      bgColor: backgroundColor,\r\n      textColor: Utils.getHighContrastColorFromString(backgroundColor)\r\n    };\r\n  }\r\n\r\n  public resetZoom() {\r\n    this._zoomTo(0);\r\n  }\r\n\r\n  public zoomOut() {\r\n    const { selectedId } = this.state;\r\n    const selectedNode = this._nodes\r\n      .filter((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        return item.customId === selectedId;\r\n      })\r\n      .pop();\r\n    if (\r\n      selectedNode &&\r\n      selectedNode.parent &&\r\n      selectedNode.parent.customId !== undefined\r\n    ) {\r\n      this._zoomTo(selectedNode.parent.customId);\r\n    }\r\n  }\r\n\r\n  public getZoomLevel() {\r\n    const { selectedNode } = this.state;\r\n    return selectedNode.depth;\r\n  }\r\n\r\n  private _zoomTo(nodeId: number) {\r\n    const {\r\n      selectedId,\r\n      xScaleFunction,\r\n      yScaleFunction,\r\n      width,\r\n      height\r\n    } = this.state;\r\n\r\n    if (selectedId !== nodeId) {\r\n      const currentNodeArray = this._nodes.filter(\r\n        (item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n          return item.customId.toString() === nodeId.toString();\r\n        }\r\n      );\r\n      if (currentNodeArray.length > 0) {\r\n        const currentNode = currentNodeArray[0];\r\n        const scopedNodes = currentNode.descendants();\r\n        const x = currentNode.x0;\r\n        const y = currentNode.y0;\r\n        const dx = currentNode.x1 - currentNode.x0;\r\n        const dy = currentNode.y1 - currentNode.y0;\r\n        const xScaleFactor = width / dx;\r\n        const yScaleFactor = height / dy;\r\n        const breadCrumbItems = this._treemap(this._rootData)\r\n          .path(currentNode)\r\n          .map((n: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n            return {\r\n              text: n.data[\"name\"],\r\n              key: n.customId,\r\n              onClick: this._onBreadcrumbItemClicked\r\n            };\r\n          });\r\n        this.setState({\r\n          xScaleFactor,\r\n          yScaleFactor,\r\n          xScaleFunction: xScaleFunction.domain([x, x + dx]),\r\n          yScaleFunction: yScaleFunction.domain([y, y + dy]),\r\n          zoomEnabled: currentNode.parent === null ? false : true,\r\n          selectedId: nodeId,\r\n          selectedNode: currentNode,\r\n          scopedNodes,\r\n          selectedNodeTotalNodes: scopedNodes.length,\r\n          breadCrumbItems\r\n        });\r\n      } else {\r\n        console.warn(\"No node found for \" + nodeId);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default TreeMap;\r\n","export { default } from \"./TreeMap\"\nexport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\""],"sourceRoot":""}