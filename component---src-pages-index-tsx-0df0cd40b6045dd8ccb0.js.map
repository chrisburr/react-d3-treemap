{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/App/App.tsx","webpack:///./src/components/Node/Node.tsx","webpack:///./src/components/Node/index.ts","webpack:///./src/data/data.ts","webpack:///./src/data/data.1.level.ts","webpack:///./src/components/TreeMap/ITreeMapProps.ts","webpack:///./src/components/Breadcrumb/Breadcrumb.tsx","webpack:///./src/utils/Utils.ts","webpack:///./src/components/TreeMap/TreeMap.tsx","webpack:///./src/components/TreeMap/index.ts"],"names":["App","props","state","data","data1","treeMapRef","React","componentDidMount","console","log","this","current","render","width","height","ref","id","valueUnit","className","nodeClassName","paddingInner","onZoom","level","items","onTreeMapDidMount","treeMap","getZoomLevel","nodeStyle","fontSize","paddingTop","paddingLeft","paddingRight","numberOfChildrenPlacement","NumberOfChildrenPlacement","BottomRight","customD3ColorScale","scaleSequential","chromatic","colorModel","ColorModel","OneEachChildren","onClick","setState","data2","resetZoom","zoomOut","hot","module","canvas","getNumberItemsWidthByNumberOfChars","numberOfChars","getTextWidth","text","style","fontVariant","fontWeight","fontFamily","document","createElement","context","getContext","font","measureText","charWidthCache","LabelNewLine","label","textColor","value","hasChildren","containerWidth","fullLabel","split","concat","map","item","index","fill","key","x","dy","maxWidth","ellipsis","cachedCharWidth","char","cached","undefined","charWidth","truncatedChars","charArray","Array","from","ellipsisWidth","charAt","currentWidth","didTruncate","i","length","join","truncateText","NumberOfChildren","name","nodeTotalNodes","isSelectedNode","placement","realPlacement","TopRight","Number","itemsWidth","toString","itemsHeight","strokeDasharrayTotal","transform","y","stroke","strokeDasharray","textAnchor","Node","bgColor","globalTotalNodes","hideNumberOfChildren","treemapId","url","x0","x1","xScaleFactor","xScaleFunction","xTranslated","y0","y1","yScaleFactor","yScaleFunction","yTranslated","zoomEnabled","currentXTranslated","currentYTranslated","currentHeight","cursor","showNumberOfItems","paddedCurrentWidth","clipWidth","Math","max","classnames","Node__link","href","target","clipPath","children","link","Breadcrumb","Utils","getTopSubParent","node","parent","customId","getDepth","obj","childrenPropInData","depth","forEach","d","tmpDepth","getHighContrastColor","r","g","b","c","pow","getHighContrastColorFromString","backgroundColor","rgbColor","rgb","TreeMap","_onBreadcrumbItemClicked","ev","_zoomTo","currentTarget","_onNodeClick","parseInt","namePropInData","_createD3TreeMap","scaleLinear","range","breadcrumbItems","selectedId","selectedNode","_treemap","_rootData","totalNodes","_nodes","UNSAFE_componentWillReceiveProps","nextProps","svgClassName","svgStyle","breadCrumbClassName","disableBreadcrumb","reactNodes","iterateAllChildren","mainNode","_getNode","hasOwnProperty","element","valuePropInData","valueFormat","treemap","size","tile","treemapSquarify","paddingOuter","round","hierarchy","sum","s","sort","a","numberItemId","each","descendants","_valueFormatFunction","format","Depth","Value","extent","n","_nodesbgColorFunction","domain","hideValue","linkPropInData","nodeClassNameFromData","formattedValue","_getColorsFromNode","originalBackgroundColor","interpolate","interpolateHcl","nodeId","currentNode","filter","pop","dx","path","warn","defaultProps","interpolateSpectral"],"mappings":"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","file":"component---src-pages-index-tsx-0df0cd40b6045dd8ccb0.js","sourcesContent":["import App from \"../App\";\r\nexport default App;\r\n","import \"./App.css\";\r\n\r\nimport ContainerDimensions from \"react-container-dimensions\";\r\nimport { scaleSequential } from \"d3-scale\";\r\nimport * as chromatic from \"d3-scale-chromatic\";\r\nimport { hot } from \"react-hot-loader\";\r\n\r\nimport * as React from \"react\";\r\nimport { data as data1 } from \"../data/data\";\r\nimport { data as data2 } from \"../data/data.1.level\";\r\nimport TreeMap, { ColorModel } from \"../components/TreeMap\";\r\nimport { NumberOfChildrenPlacement } from \"../components/Node\";\r\n\r\ninterface TreeMapInPutData {\r\n  name: string;\r\n  value?: number;\r\n  children?: Array<TreeMapInPutData>;\r\n  className?: string;\r\n}\r\n\r\nclass App extends React.Component<{}, { data: TreeMapInPutData }> {\r\n  private treeMapRef: React.RefObject<TreeMap<TreeMapInPutData>>;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: data1,\r\n    };\r\n    this.treeMapRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    console.log(\r\n      \"componentDidMount: \",\r\n      this.treeMapRef && this.treeMapRef.current\r\n    );\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <React.Fragment>\r\n        <ContainerDimensions>\r\n          {({ width, height }) => {\r\n            return (\r\n              <TreeMap<TreeMapInPutData>\r\n                ref={this.treeMapRef}\r\n                id=\"myTreeMap\"\r\n                width={width}\r\n                height={400}\r\n                data={this.state.data}\r\n                valueUnit={\"MB\"}\r\n                className=\"AppTreeMap\"\r\n                nodeClassName=\"AppTreeMap__node\"\r\n                // svgClassName=\"AppTreeMap__svg\"\r\n                paddingInner={2}\r\n                onZoom={(level, id, items) => console.log({ level, id, items })}\r\n                onTreeMapDidMount={(treeMap: TreeMap<TreeMapInPutData>) =>\r\n                  console.log(treeMap.getZoomLevel())\r\n                }\r\n                nodeStyle={{\r\n                  fontSize: 12,\r\n                  paddingTop: 2,\r\n                  paddingLeft: 5,\r\n                  paddingRight: 5,\r\n                }}\r\n                numberOfChildrenPlacement={NumberOfChildrenPlacement.BottomRight}\r\n                customD3ColorScale={scaleSequential(\r\n                  chromatic.interpolateSpectral\r\n                )}\r\n                colorModel={ColorModel.OneEachChildren}\r\n                // svgStyle={{fontFamily: \"'Courier New', Courier, monospace\"}}\r\n                // nodeStyle={{fill: \"black\", stroke: \"white\"}}\r\n                // disableBreadcrumb={true}\r\n                // hideNumberOfChildren={true}\r\n                // hideValue={true}\r\n              />\r\n            );\r\n          }}\r\n        </ContainerDimensions>\r\n        <div>\r\n          <a onClick={() => this.setState({ data: data2 })}>Change data</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.resetZoom()}>Zoom Reset</a>\r\n        </div>\r\n        <div>\r\n          <a onClick={() => this.treeMapRef.current.zoomOut()}>Zoom out</a>\r\n        </div>\r\n        <div>\r\n          <a\r\n            onClick={() => console.log(this.treeMapRef.current.getZoomLevel())}\r\n          >\r\n            Zoom level\r\n          </a>\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default hot(module)(App);\r\n","import \"./Node.css\";\r\n\r\nimport * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { ScaleLinear } from \"d3-scale\";\r\n\r\nexport interface NodeProps {\r\n  /*\r\n        HierarchyRectangularNode properties\r\n    */\r\n  x0?: number;\r\n  y0?: number;\r\n  x1?: number;\r\n  y1?: number;\r\n\r\n  bgColor: string;\r\n  className?: string;\r\n  globalTotalNodes: number;\r\n  hasChildren: boolean;\r\n  height?: number;\r\n  hideNumberOfChildren?: boolean;\r\n  id: number;\r\n  isSelectedNode: boolean;\r\n  label: string;\r\n  name: string;\r\n  nodeTotalNodes: number;\r\n  onClick?: (ev?: React.MouseEvent<SVGElement>) => void;\r\n  style?: React.CSSProperties;\r\n  textColor: string;\r\n  treemapId?: string;\r\n  url: string;\r\n  value: string;\r\n  width?: number;\r\n  xScaleFactor?: number;\r\n  xScaleFunction?: ScaleLinear<number, number>;\r\n  xTranslated?: number;\r\n  yScaleFactor?: number;\r\n  yScaleFunction?: ScaleLinear<number, number>;\r\n  yTranslated?: number;\r\n  zoomEnabled?: boolean;\r\n  numberOfChildrenPlacement: NumberOfChildrenPlacement;\r\n}\r\n\r\nexport enum NumberOfChildrenPlacement {\r\n  TopRight,\r\n  BottomRight,\r\n}\r\n\r\nconst getNumberItemsWidthByNumberOfChars = (\r\n  fontSize: number,\r\n  numberOfChars: number\r\n) => {\r\n  return (fontSize / 2) * numberOfChars + 5;\r\n};\r\n\r\nlet canvas;\r\nconst getTextWidth = (\r\n  text,\r\n  style: React.CSSProperties = {\r\n    fontVariant: \"normal\",\r\n    fontWeight: \"normal\",\r\n    fontSize: 14,\r\n    fontFamily: \"Arial\",\r\n  }\r\n) => {\r\n  // re-use canvas object for better performance\r\n  if (!canvas) {\r\n    canvas = document.createElement(\"canvas\");\r\n  }\r\n  var context = canvas.getContext(\"2d\");\r\n  const { fontVariant, fontWeight, fontSize, fontFamily } = style;\r\n  if (context) {\r\n    context.font = `${fontVariant} ${fontWeight} ${fontSize}px '${fontFamily}'`;\r\n    return {\r\n      width: context.measureText(text).width,\r\n      height: fontSize,\r\n    };\r\n  } else {\r\n    return { width: 0, height: fontSize };\r\n  }\r\n};\r\n\r\nconst charWidthCache: Record<string, number> = {};\r\nconst truncateText = (\r\n  text: string,\r\n  style: React.CSSProperties,\r\n  maxWidth: number,\r\n  ellipsis: string = \"...\"\r\n) => {\r\n  const cachedCharWidth = (char: string) => {\r\n    const cached = charWidthCache[char];\r\n    if (cached !== undefined) {\r\n      return cached;\r\n    }\r\n    const charWidth = getTextWidth(char, style).width;\r\n    charWidthCache[char] = charWidth;\r\n    return charWidth;\r\n  };\r\n\r\n  const truncatedChars: string[] = [];\r\n  const charArray = Array.from(text);\r\n\r\n  const ellipsisWidth = cachedCharWidth(ellipsis);\r\n  if (maxWidth - ellipsisWidth < 0) {\r\n    return text.charAt(0);\r\n  }\r\n\r\n  let currentWidth = ellipsisWidth;\r\n  let didTruncate = false;\r\n  for (let i = 0; i < charArray.length; i++) {\r\n    const charWidth = cachedCharWidth(charArray[i]);\r\n    if (currentWidth + charWidth <= maxWidth) {\r\n      truncatedChars[i] = charArray[i];\r\n      currentWidth += charWidth;\r\n    } else {\r\n      truncatedChars[i] = ellipsis;\r\n      didTruncate = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (didTruncate) {\r\n    return truncatedChars.join(\"\");\r\n  }\r\n\r\n  return text;\r\n};\r\n\r\nconst LabelNewLine = ({\r\n  label,\r\n  textColor,\r\n  fontSize,\r\n  value,\r\n  hasChildren,\r\n  containerWidth,\r\n  style,\r\n}) => {\r\n  if (!label) {\r\n    return null;\r\n  }\r\n\r\n  const fullLabel = value ? `${label}\\xa0${value}` : label;\r\n  const splitLabel =\r\n    getTextWidth(fullLabel, style).width >= containerWidth || !hasChildren\r\n      ? label.split(/(?=[A-Z][^A-Z])/g).concat(value)\r\n      : [fullLabel];\r\n\r\n  return splitLabel.map((item: string, index) => {\r\n    return (\r\n      <tspan\r\n        fontSize={fontSize}\r\n        fill={textColor}\r\n        key={index}\r\n        x={0}\r\n        dy={fontSize}\r\n      >\r\n        {truncateText(item, style, containerWidth)}\r\n      </tspan>\r\n    );\r\n  });\r\n};\r\n\r\nconst NumberOfChildren = ({\r\n  name,\r\n  width,\r\n  height,\r\n  textColor,\r\n  nodeTotalNodes,\r\n  isSelectedNode,\r\n  placement,\r\n  style,\r\n}) => {\r\n  const realPlacement = isSelectedNode\r\n    ? NumberOfChildrenPlacement.TopRight\r\n    : placement;\r\n\r\n  const fontSize = Number(style.fontSize);\r\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\r\n    fontSize,\r\n    nodeTotalNodes.toString().length\r\n  );\r\n  const itemHeightFactor = 2;\r\n  const itemsHeight = fontSize + itemHeightFactor;\r\n  const strokeDasharrayTotal = itemsWidth + itemsHeight;\r\n  if (width > itemsWidth && height > itemsHeight) {\r\n    return (\r\n      <g\r\n        transform={`translate(0, ${\r\n          realPlacement === NumberOfChildrenPlacement.BottomRight\r\n            ? height - itemsHeight\r\n            : 0\r\n        })`}\r\n      >\r\n        <rect\r\n          id={`rectNumberItems-${name}`}\r\n          x={width - itemsWidth}\r\n          y={0}\r\n          width={itemsWidth}\r\n          height={itemsHeight}\r\n          fill=\"none\"\r\n          stroke={textColor}\r\n          strokeDasharray={`${\r\n            realPlacement === NumberOfChildrenPlacement.BottomRight\r\n              ? itemsWidth\r\n              : 0\r\n          },${strokeDasharrayTotal},${strokeDasharrayTotal}`}\r\n        />\r\n        <text\r\n          fill={textColor}\r\n          x={width - itemsWidth + itemsWidth / 2}\r\n          y={itemsHeight - itemHeightFactor}\r\n          textAnchor=\"middle\"\r\n          style={{\r\n            fontVariant: style.fontVariant,\r\n            fontWeight: style.fontWeight,\r\n            fontSize: style.fontSize,\r\n            fontFamily: style.fontFamily,\r\n          }}\r\n        >\r\n          {nodeTotalNodes}\r\n        </text>\r\n      </g>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Node: React.FunctionComponent<NodeProps> = ({\r\n  bgColor,\r\n  className,\r\n  globalTotalNodes,\r\n  hasChildren,\r\n  height,\r\n  hideNumberOfChildren,\r\n  id,\r\n  isSelectedNode,\r\n  label,\r\n  nodeTotalNodes,\r\n  onClick,\r\n  textColor,\r\n  treemapId,\r\n  url,\r\n  value,\r\n  width,\r\n  x0,\r\n  x1,\r\n  xScaleFactor,\r\n  xScaleFunction,\r\n  xTranslated,\r\n  y0,\r\n  y1,\r\n  yScaleFactor,\r\n  yScaleFunction,\r\n  yTranslated,\r\n  zoomEnabled,\r\n  style,\r\n  numberOfChildrenPlacement,\r\n}) => {\r\n  const currentXTranslated =\r\n    xTranslated !== undefined\r\n      ? xTranslated\r\n      : zoomEnabled === true\r\n      ? xScaleFunction(x0)\r\n      : x0;\r\n  const currentYTranslated =\r\n    yTranslated !== undefined\r\n      ? yTranslated\r\n      : zoomEnabled === true\r\n      ? yScaleFunction(y0)\r\n      : y0;\r\n  const currentWidth = width !== undefined ? width : xScaleFactor * (x1 - x0);\r\n  const currentHeight =\r\n    height !== undefined ? height : yScaleFactor * (y1 - y0);\r\n\r\n  const cursor =\r\n    hasChildren === true && isSelectedNode === false ? \"pointer\" : \"auto\";\r\n\r\n  const fontSize = Number(style.fontSize);\r\n  const itemsWidth = getNumberItemsWidthByNumberOfChars(\r\n    fontSize,\r\n    nodeTotalNodes.toString().length\r\n  );\r\n  const showNumberOfItems = !hideNumberOfChildren && hasChildren;\r\n\r\n  const paddedCurrentWidth =\r\n    currentWidth -\r\n    (Number(style.paddingLeft) || 0) -\r\n    (Number(style.paddingRight) || 4);\r\n  const clipWidth = Math.max(\r\n    0,\r\n    showNumberOfItems &&\r\n      numberOfChildrenPlacement === NumberOfChildrenPlacement.TopRight\r\n      ? paddedCurrentWidth - itemsWidth\r\n      : paddedCurrentWidth\r\n  );\r\n\r\n  return (\r\n    <g\r\n      transform={`translate(${currentXTranslated},${currentYTranslated})`}\r\n      id={`${id}`}\r\n      onClick={hasChildren ? onClick : null}\r\n      style={{ cursor }}\r\n    >\r\n      <rect\r\n        id={`rect-${id}`}\r\n        width={currentWidth}\r\n        height={currentHeight}\r\n        className={classnames(\"Node\", className)}\r\n        style={{\r\n          fill: bgColor,\r\n          stroke: textColor,\r\n          ...style,\r\n        }}\r\n      />\r\n      <clipPath id={`clip-${treemapId}-${id}`}>\r\n        <rect width={clipWidth} height={currentHeight} />\r\n      </clipPath>\r\n      <a\r\n        className={classnames({ Node__link: !!url })}\r\n        href={url}\r\n        target=\"_blank\"\r\n      >\r\n        <text\r\n          clipPath={`url(#clip-${treemapId}-${id})`}\r\n          transform={`translate(${style.paddingLeft || 0},${\r\n            style.paddingTop || 0\r\n          })`}\r\n          style={{\r\n            fontVariant: style.fontVariant,\r\n            fontWeight: style.fontWeight,\r\n            fontSize: style.fontSize,\r\n            fontFamily: style.fontFamily,\r\n          }}\r\n        >\r\n          <LabelNewLine\r\n            label={label}\r\n            textColor={textColor}\r\n            fontSize={fontSize}\r\n            value={value}\r\n            hasChildren={hasChildren}\r\n            containerWidth={clipWidth}\r\n            style={style}\r\n          />\r\n        </text>\r\n      </a>\r\n      {showNumberOfItems && (\r\n        <NumberOfChildren\r\n          name={name}\r\n          width={currentWidth}\r\n          height={currentHeight}\r\n          style={style}\r\n          textColor={textColor}\r\n          nodeTotalNodes={nodeTotalNodes}\r\n          isSelectedNode={isSelectedNode}\r\n          placement={numberOfChildrenPlacement}\r\n        />\r\n      )}\r\n      <title>\r\n        {`${label}\\n${value}\\n${nodeTotalNodes}/${globalTotalNodes}`}\r\n      </title>\r\n    </g>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","export { default, NodeProps, NumberOfChildrenPlacement } from \"./Node\";\n","// Format\r\n// name: name of the file or folder\r\n// type: folder or file\r\n// value: number of bytes of the doc (calculated at folder level by d3)\r\n// children: sub files or sub folders\r\n\r\nexport const data = {\r\n  name: \"flare\",\r\n  children: [\r\n    {\r\n      name: \"analytics\",\r\n      className: \"AppTreeMap__analytics\",\r\n      link: \"https://blog.josequinto.com\",\r\n      children: [\r\n        {\r\n          name: \"cluster\",\r\n          children: [\r\n            {\r\n              name: \"AgglomerativeCluster\",\r\n              value: 3938,\r\n              link: \"https://blog.josequinto.com\"\r\n            },\r\n            { name: \"CommunityStructure\", value: 3812 },\r\n            { name: \"HierarchicalCluster\", value: 6714 },\r\n            { name: \"MergeEdge\", value: 743 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"graph\",\r\n          children: [\r\n            { name: \"BetweennessCentrality\", value: 3534 },\r\n            { name: \"LinkDistance\", value: 5731 },\r\n            { name: \"MaxFlowMinCut\", value: 7840 },\r\n            { name: \"ShortestPaths\", value: 5914 },\r\n            { name: \"SpanningTree\", value: 3416 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"optimization\",\r\n          children: [{ name: \"AspectRatioBanker\", value: 7074 }]\r\n        }\r\n      ]\r\n    },\r\n    {\r\n      name: \"animate\",\r\n      children: [\r\n        { name: \"Easing\", value: 17010 },\r\n        { name: \"FunctionSequence\", value: 5842 },\r\n        {\r\n          name: \"interpolate\",\r\n          children: [\r\n            { name: \"ArrayInterpolator\", value: 1983 },\r\n            { name: \"ColorInterpolator\", value: 2047 },\r\n            { name: \"DateInterpolator\", value: 1375 },\r\n            { name: \"Interpolator\", value: 8746 },\r\n            { name: \"MatrixInterpolator\", value: 2202 },\r\n            { name: \"NumberInterpolator\", value: 1382 },\r\n            { name: \"ObjectInterpolator\", value: 1629 },\r\n            { name: \"PointInterpolator\", value: 1675 },\r\n            { name: \"RectangleInterpolator\", value: 2042 }\r\n          ]\r\n        },\r\n        { name: \"ISchedulable\", value: 1041 },\r\n        { name: \"Parallel\", value: 5176 },\r\n        { name: \"Pause\", value: 449 },\r\n        { name: \"Scheduler\", value: 5593 },\r\n        { name: \"Sequence\", value: 5534 },\r\n        { name: \"Transition\", value: 9201 },\r\n        { name: \"Transitioner\", value: 19975 },\r\n        { name: \"TransitionEvent\", value: 1116 },\r\n        { name: \"Tween\", value: 6006 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"data\",\r\n      children: [\r\n        {\r\n          name: \"converters\",\r\n          children: [\r\n            { name: \"Converters\", value: 721 },\r\n            { name: \"DelimitedTextConverter\", value: 4294 },\r\n            { name: \"GraphMLConverter\", value: 9800 },\r\n            { name: \"IDataConverter\", value: 1314 },\r\n            { name: \"JSONConverter\", value: 2220 }\r\n          ]\r\n        },\r\n        { name: \"DataField\", value: 1759 },\r\n        { name: \"DataSchema\", value: 2165 },\r\n        { name: \"DataSet\", value: 586 },\r\n        { name: \"DataSource\", value: 3331 },\r\n        { name: \"DataTable\", value: 772 },\r\n        { name: \"DataUtil\", value: 3322 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"display\",\r\n      children: [\r\n        { name: \"DirtySprite\", value: 8833 },\r\n        { name: \"LineSprite\", value: 1732 },\r\n        { name: \"RectSprite\", value: 3623 },\r\n        { name: \"TextSprite\", value: 10066 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"flex\",\r\n      children: [{ name: \"FlareVis\", value: 4116 }]\r\n    },\r\n    {\r\n      name: \"physics\",\r\n      children: [\r\n        { name: \"DragForce\", value: 1082 },\r\n        { name: \"GravityForce\", value: 1336 },\r\n        { name: \"IForce\", value: 319 },\r\n        { name: \"NBodyForce\", value: 10498 },\r\n        { name: \"Particle\", value: 2822 },\r\n        { name: \"Simulation\", value: 9983 },\r\n        { name: \"Spring\", value: 2213 },\r\n        { name: \"SpringForce\", value: 1681 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"query\",\r\n      children: [\r\n        { name: \"AggregateExpression\", value: 1616 },\r\n        { name: \"And\", value: 1027 },\r\n        { name: \"Arithmetic\", value: 3891 },\r\n        { name: \"Average\", value: 891 },\r\n        { name: \"BinaryExpression\", value: 2893 },\r\n        { name: \"Comparison\", value: 5103 },\r\n        { name: \"CompositeExpression\", value: 3677 },\r\n        { name: \"Count\", value: 781 },\r\n        { name: \"DateUtil\", value: 4141 },\r\n        { name: \"Distinct\", value: 933 },\r\n        { name: \"Expression\", value: 5130 },\r\n        { name: \"ExpressionIterator\", value: 3617 },\r\n        { name: \"Fn\", value: 3240 },\r\n        { name: \"If\", value: 2732 },\r\n        { name: \"IsA\", value: 2039 },\r\n        { name: \"Literal\", value: 1214 },\r\n        { name: \"Match\", value: 3748 },\r\n        { name: \"Maximum\", value: 843 },\r\n        {\r\n          name: \"methods\",\r\n          children: [\r\n            { name: \"add\", value: 593 },\r\n            { name: \"and\", value: 330 },\r\n            { name: \"average\", value: 287 },\r\n            { name: \"count\", value: 277 },\r\n            { name: \"distinct\", value: 292 },\r\n            { name: \"div\", value: 595 },\r\n            { name: \"eq\", value: 594 },\r\n            { name: \"fn\", value: 460 },\r\n            { name: \"gt\", value: 603 },\r\n            { name: \"gte\", value: 625 },\r\n            { name: \"iff\", value: 748 },\r\n            { name: \"isa\", value: 461 },\r\n            { name: \"lt\", value: 597 },\r\n            { name: \"lte\", value: 619 },\r\n            { name: \"max\", value: 283 },\r\n            { name: \"min\", value: 283 },\r\n            { name: \"mod\", value: 591 },\r\n            { name: \"mul\", value: 603 },\r\n            { name: \"neq\", value: 599 },\r\n            { name: \"not\", value: 386 },\r\n            { name: \"or\", value: 323 },\r\n            { name: \"orderby\", value: 307 },\r\n            { name: \"range\", value: 772 },\r\n            { name: \"select\", value: 296 },\r\n            { name: \"stddev\", value: 363 },\r\n            { name: \"sub\", value: 600 },\r\n            { name: \"sum\", value: 280 },\r\n            { name: \"update\", value: 307 },\r\n            { name: \"variance\", value: 335 },\r\n            { name: \"where\", value: 299 },\r\n            { name: \"xor\", value: 354 },\r\n            { name: \"_\", value: 264 }\r\n          ]\r\n        },\r\n        { name: \"Minimum\", value: 843 },\r\n        { name: \"Not\", value: 1554 },\r\n        { name: \"Or\", value: 970 },\r\n        { name: \"Query\", value: 13896 },\r\n        { name: \"Range\", value: 1594 },\r\n        { name: \"StringUtil\", value: 4130 },\r\n        { name: \"Sum\", value: 791 },\r\n        { name: \"Variable\", value: 1124 },\r\n        { name: \"Variance\", value: 1876 },\r\n        { name: \"Xor\", value: 1101 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"scale\",\r\n      children: [\r\n        { name: \"IScaleMap\", value: 2105 },\r\n        { name: \"LinearScale\", value: 1316 },\r\n        { name: \"LogScale\", value: 3151 },\r\n        { name: \"OrdinalScale\", value: 3770 },\r\n        { name: \"QuantileScale\", value: 2435 },\r\n        { name: \"QuantitativeScale\", value: 4839 },\r\n        { name: \"RootScale\", value: 1756 },\r\n        { name: \"Scale\", value: 4268 },\r\n        { name: \"ScaleType\", value: 1821 },\r\n        { name: \"TimeScale\", value: 5833 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"util\",\r\n      children: [\r\n        { name: \"Arrays\", value: 8258 },\r\n        { name: \"Colors\", value: 10001 },\r\n        { name: \"Dates\", value: 8217 },\r\n        { name: \"Displays\", value: 12555 },\r\n        { name: \"Filter\", value: 2324 },\r\n        { name: \"Geometry\", value: 10993 },\r\n        {\r\n          name: \"heap\",\r\n          children: [\r\n            { name: \"FibonacciHeap\", value: 9354 },\r\n            { name: \"HeapNode\", value: 1233 }\r\n          ]\r\n        },\r\n        { name: \"IEvaluable\", value: 335 },\r\n        { name: \"IPredicate\", value: 383 },\r\n        { name: \"IValueProxy\", value: 874 },\r\n        {\r\n          name: \"math\",\r\n          children: [\r\n            { name: \"DenseMatrix\", value: 3165 },\r\n            { name: \"IMatrix\", value: 2815 },\r\n            { name: \"SparseMatrix\", value: 3366 }\r\n          ]\r\n        },\r\n        { name: \"Maths\", value: 17705 },\r\n        { name: \"Orientation\", value: 1486 },\r\n        {\r\n          name: \"palette\",\r\n          children: [\r\n            { name: \"ColorPalette\", value: 6367 },\r\n            { name: \"Palette\", value: 1229 },\r\n            { name: \"ShapePalette\", value: 2059 },\r\n            { name: \"SizePalette\", value: 2291 }\r\n          ]\r\n        },\r\n        { name: \"Property\", value: 5559 },\r\n        { name: \"Shapes\", value: 19118 },\r\n        { name: \"Sort\", value: 6887 },\r\n        { name: \"Stats\", value: 6557 },\r\n        { name: \"Strings\", value: 22026 }\r\n      ]\r\n    },\r\n    {\r\n      name: \"vis\",\r\n      children: [\r\n        {\r\n          name: \"axis\",\r\n          children: [\r\n            { name: \"Axes\", value: 1302 },\r\n            { name: \"Axis\", value: 24593 },\r\n            { name: \"AxisGridLine\", value: 652 },\r\n            { name: \"AxisLabel\", value: 636 },\r\n            { name: \"CartesianAxes\", value: 6703 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"controls\",\r\n          children: [\r\n            { name: \"AnchorControl\", value: 2138 },\r\n            { name: \"ClickControl\", value: 3824 },\r\n            { name: \"Control\", value: 1353 },\r\n            { name: \"ControlList\", value: 4665 },\r\n            { name: \"DragControl\", value: 2649 },\r\n            { name: \"ExpandControl\", value: 2832 },\r\n            { name: \"HoverControl\", value: 4896 },\r\n            { name: \"IControl\", value: 763 },\r\n            { name: \"PanZoomControl\", value: 5222 },\r\n            { name: \"SelectionControl\", value: 7862 },\r\n            { name: \"TooltipControl\", value: 8435 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"data\",\r\n          children: [\r\n            { name: \"Data\", value: 20544 },\r\n            { name: \"DataList\", value: 19788 },\r\n            { name: \"DataSprite\", value: 10349 },\r\n            { name: \"EdgeSprite\", value: 3301 },\r\n            { name: \"NodeSprite\", value: 19382 },\r\n            {\r\n              name: \"render\",\r\n              children: [\r\n                { name: \"ArrowType\", value: 698 },\r\n                { name: \"EdgeRenderer\", value: 5569 },\r\n                { name: \"IRenderer\", value: 353 },\r\n                { name: \"ShapeRenderer\", value: 2247 }\r\n              ]\r\n            },\r\n            { name: \"ScaleBinding\", value: 11275 },\r\n            { name: \"Tree\", value: 7147 },\r\n            { name: \"TreeBuilder\", value: 9930 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"events\",\r\n          children: [\r\n            { name: \"DataEvent\", value: 2313 },\r\n            { name: \"SelectionEvent\", value: 1880 },\r\n            { name: \"TooltipEvent\", value: 1701 },\r\n            { name: \"VisualizationEvent\", value: 1117 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"legend\",\r\n          children: [\r\n            { name: \"Legend\", value: 20859 },\r\n            { name: \"LegendItem\", value: 4614 },\r\n            { name: \"LegendRange\", value: 10530 }\r\n          ]\r\n        },\r\n        {\r\n          name: \"operator\",\r\n          children: [\r\n            {\r\n              name: \"distortion\",\r\n              children: [\r\n                { name: \"BifocalDistortion\", value: 4461 },\r\n                { name: \"Distortion\", value: 6314 },\r\n                { name: \"FisheyeDistortion\", value: 3444 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"encoder\",\r\n              children: [\r\n                { name: \"ColorEncoder\", value: 3179 },\r\n                { name: \"Encoder\", value: 4060 },\r\n                { name: \"PropertyEncoder\", value: 4138 },\r\n                { name: \"ShapeEncoder\", value: 1690 },\r\n                { name: \"SizeEncoder\", value: 1830 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"filter\",\r\n              children: [\r\n                { name: \"FisheyeTreeFilter\", value: 5219 },\r\n                { name: \"GraphDistanceFilter\", value: 3165 },\r\n                { name: \"VisibilityFilter\", value: 3509 }\r\n              ]\r\n            },\r\n            { name: \"IOperator\", value: 1286 },\r\n            {\r\n              name: \"label\",\r\n              children: [\r\n                { name: \"Labeler\", value: 9956 },\r\n                { name: \"RadialLabeler\", value: 3899 },\r\n                { name: \"StackedAreaLabeler\", value: 3202 }\r\n              ]\r\n            },\r\n            {\r\n              name: \"layout\",\r\n              children: [\r\n                { name: \"AxisLayout\", value: 6725 },\r\n                { name: \"BundledEdgeRouter\", value: 3727 },\r\n                { name: \"CircleLayout\", value: 9317 },\r\n                { name: \"CirclePackingLayout\", value: 12003 },\r\n                { name: \"DendrogramLayout\", value: 4853 },\r\n                { name: \"ForceDirectedLayout\", value: 8411 },\r\n                { name: \"IcicleTreeLayout\", value: 4864 },\r\n                { name: \"IndentedTreeLayout\", value: 3174 },\r\n                { name: \"Layout\", value: 7881 },\r\n                { name: \"NodeLinkTreeLayout\", value: 12870 },\r\n                { name: \"PieLayout\", value: 2728 },\r\n                { name: \"RadialTreeLayout\", value: 12348 },\r\n                { name: \"RandomLayout\", value: 870 },\r\n                { name: \"StackedAreaLayout\", value: 9121 },\r\n                { name: \"TreeMapLayout\", value: 9191 }\r\n              ]\r\n            },\r\n            { name: \"Operator\", value: 2490 },\r\n            { name: \"OperatorList\", value: 5248 },\r\n            { name: \"OperatorSequence\", value: 4190 },\r\n            { name: \"OperatorSwitch\", value: 2581 },\r\n            { name: \"SortOperator\", value: 2023 }\r\n          ]\r\n        },\r\n        { name: \"Visualization\", value: 16540 }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n","export const data = {\r\n  name: \"Documents\",\r\n  children: [\r\n    {\r\n      name: \"AgglomerativeCluster\",\r\n      value: 3938,\r\n      link: \"https://blog.josequinto.com\"\r\n    },\r\n    { name: \"CommunityStructure\", value: 3812 },\r\n    { name: \"HierarchicalCluster\", value: 6714 },\r\n    { name: \"MergeEdge\", value: 743 }\r\n  ]\r\n};\r\n","import { ScaleSequential } from \"d3-scale\";\r\nimport TreeMap from \"../TreeMap\";\r\nimport { IBreadcrumbItem } from \"../Breadcrumb\";\r\nimport { NumberOfChildrenPlacement } from \"../Node\";\r\n\r\nexport interface ITreeMapProps<TreeMapInputData> {\r\n  /**\r\n   * TreeMap id, will be use for create customId for each node\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * TreeMap width\r\n   */\r\n  width: number;\r\n\r\n  /**\r\n   * TreeMap height\r\n   */\r\n  height: number;\r\n\r\n  /**\r\n   * TreeMap data. Normally should have at least name, value and children.\r\n   *\r\n   * Example:\r\n   *  interface TreeMapInPutData {\r\n   *      name: string;\r\n   *      value?: number;\r\n   *      children?: Array<TreeMapInPutData>;\r\n   *      className?: string;\r\n   *  }\r\n   */\r\n  data: TreeMapInputData;\r\n\r\n  /*\r\n        Unit for values. For example MB\r\n    */\r\n  valueUnit?: string;\r\n\r\n  /*\r\n   * Format for the values\r\n   * https://github.com/d3/d3-format#format\r\n   */\r\n  valueFormat?: string;\r\n\r\n  /**\r\n   * Hide breadcrumb.\r\n   *\r\n   * If you app doesn't use breadcrumb, you can pass down a ref\r\n   * and use the methods: zoomOut, resetZoom\r\n   */\r\n  disableBreadcrumb?: boolean;\r\n\r\n  /**\r\n   * There are few color strategies for nodes:\r\n   *    Depth: different color per depth\r\n   *    Value: different color depends on how big / small is the value\r\n   *    NumberOfChildren: different color depends on how many children node has\r\n   *    OneEachChildren: one color per each top children, then range of colors from white to that one\r\n   */\r\n  colorModel?: ColorModel;\r\n\r\n  /**\r\n   * Don't show the top right corner box indicating number of children\r\n   */\r\n  hideNumberOfChildren?: boolean;\r\n\r\n  /**\r\n   * Don't show the value\r\n   */\r\n  hideValue?: boolean;\r\n\r\n  /**\r\n   * Overrides top div main class\r\n   */\r\n  className?: string;\r\n\r\n  /**\r\n   * Overrides svg class\r\n   */\r\n  svgClassName?: string;\r\n\r\n  /**\r\n   * Overrides node class\r\n   */\r\n  nodeClassName?: string;\r\n\r\n  /**\r\n   * Overrides breadcrumb class\r\n   */\r\n  breadCrumbClassName?: string;\r\n\r\n  /**\r\n   * Overrides svg style\r\n   */\r\n  svgStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Overrides node style\r\n   */\r\n  nodeStyle?: React.CSSProperties;\r\n\r\n  /**\r\n   * Padding between nodes ( calculated by D3 )\r\n   */\r\n  paddingInner?: number;\r\n\r\n  /**\r\n   * Custom ScaleSequential from D3\r\n   */\r\n  customD3ColorScale?: ScaleSequential<string>;\r\n\r\n  /**\r\n   * Name for the property `name` included in data\r\n   *\r\n   * @default \"name\"\r\n   */\r\n  namePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `link` included in data\r\n   *\r\n   * @default \"link\"\r\n   */\r\n  linkPropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `value` included in data\r\n   *\r\n   * @default \"value\"\r\n   */\r\n  valuePropInData?: string;\r\n\r\n  /**\r\n   * Name for the property `children` included in data\r\n   *\r\n   * @default \"children\"\r\n   */\r\n  childrenPropInData?: string;\r\n\r\n  /**\r\n   * Captures on zoom event\r\n   */\r\n  onZoom?: (\r\n    zoomLevel: number,\r\n    zoomId: number,\r\n    breadcrumbItems: IBreadcrumbItem[]\r\n  ) => void;\r\n\r\n  /**\r\n   * Triggers when TreeMap is mounted\r\n   */\r\n  onTreeMapDidMount?: (treeMap: TreeMap<TreeMapInputData>) => void;\r\n\r\n  /**\r\n   * Indicates where to place NumberOfChildren box\r\n   *\r\n   * @default NumberOfChildrenPlacement.BottomRight\r\n   */\r\n  numberOfChildrenPlacement: NumberOfChildrenPlacement;\r\n}\r\n\r\nexport enum ColorModel {\r\n  Depth,\r\n  Value,\r\n  NumberOfChildren,\r\n  OneEachChildren,\r\n}\r\n","import \"./Breadcrumb.css\";\n\nimport * as React from \"react\";\nimport classnames from \"classnames\";\n\nexport interface IBreadcrumbProps {\n  /**\n   * Collection of breadcrumbs to render\n   */\n  items: IBreadcrumbItem[];\n  className?: string;\n}\n\nexport interface IBreadcrumbItem {\n  /**\n   * Text to display to the user for the breadcrumb\n   */\n  text: string;\n  /**\n   * Arbitrary unique string associated with the breadcrumb\n   */\n  key: number;\n  /**\n   * Callback issued when the breadcrumb is selected.\n   */\n  onClick?: (\n    ev?: React.MouseEvent<HTMLElement>,\n    item?: IBreadcrumbItem\n  ) => void;\n}\n\nexport const Breadcrumb: React.FunctionComponent<IBreadcrumbProps> = ({\n  className,\n  items\n}) => {\n  if (!items) {\n    return null;\n  }\n\n  return (\n    <div className={classnames(\"TreeMap__breadcrumb\", className)}>\n      {items.map((item: IBreadcrumbItem, index: number) => (\n        <div key={index}>\n          <a\n            className=\"TreeMap__breadcrumbItem\"\n            key={item.key}\n            id={`${item.key}`}\n            onClick={item.onClick ? item.onClick : undefined}\n            style={{ cursor: item.onClick ? \"pointer\" : \"auto\" }}\n          >\n            {item.text}\n          </a>\n          {index < items.length - 1 ? (\n            <span className=\"TreeMap__breadcrumbSeparator\">/</span>\n          ) : null}\n        </div>\n      ))}\n    </div>\n  );\n};\n","import { CustomHierarchyRectangularNode } from \"../components/TreeMap/TreeMap\";\nimport { rgb } from \"d3-color\";\n\nexport class Utils {\n  public static getTopSubParent<TreeMapInputData>(\n    node: CustomHierarchyRectangularNode<TreeMapInputData>\n  ): number {\n    if (node.parent && node.parent.parent) {\n      return this.getTopSubParent(node.parent);\n    }\n    return node.customId;\n  }\n\n  public static getDepth<TreeMapInputData>(\n    obj: TreeMapInputData,\n    childrenPropInData: string\n  ) {\n    let depth = 0;\n    if (obj[childrenPropInData]) {\n      obj[childrenPropInData].forEach(d => {\n        const tmpDepth = this.getDepth(d, childrenPropInData);\n        if (tmpDepth > depth) {\n          depth = tmpDepth;\n        }\n      });\n    }\n    return 1 + depth;\n  }\n\n  public static getHighContrastColor(r: number, g: number, b: number) {\n    // based on\n    // http://stackoverflow.com/questions/407793/programmatically-choose-high-contrast-colors\n    // http://stackoverflow.com/questions/3942878/how-to-decide-font-color-in-white-or-black-depending-on-background-color\n    const c = [r / 255, g / 255, b / 255];\n    for (let i = 0; i < c.length; ++i) {\n      if (c[i] <= 0.03928) {\n        c[i] = c[i] / 12.92;\n      } else {\n        c[i] = Math.pow((c[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n    const luminance = 0.2126 * c[0] + 0.7152 * c[1] + 0.0722 * c[2];\n    // return luminance > 0.179 ? \"black\" : \"white\";\n    return luminance > 0.4 ? \"black\" : \"white\";\n  }\n\n  public static getHighContrastColorFromString(\n    backgroundColor: string | undefined\n  ): string {\n    if (!backgroundColor) {\n      return \"black\";\n    }\n    const rgbColor = rgb(backgroundColor);\n    if (rgbColor) {\n      return Utils.getHighContrastColor(rgbColor.r, rgbColor.g, rgbColor.b);\n    }\n  }\n}\n","import * as React from \"react\";\r\nimport classnames from \"classnames\";\r\nimport { format } from \"d3-format\";\r\nimport {\r\n  TreemapLayout,\r\n  HierarchyRectangularNode,\r\n  treemap,\r\n  hierarchy,\r\n  treemapSquarify,\r\n} from \"d3-hierarchy\";\r\nimport { scaleLinear, ScaleSequential, scaleSequential } from \"d3-scale\";\r\nimport { extent } from \"d3-array\";\r\nimport { interpolateSpectral } from \"d3-scale-chromatic\";\r\nimport { interpolateHcl } from \"d3-interpolate\";\r\n\r\nimport Node, { NumberOfChildrenPlacement } from \"../Node\";\r\nimport Breadcrumb from \"../Breadcrumb\";\r\nimport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\";\r\nimport { ITreeMapState } from \"./ITreeMapState\";\r\nimport { Utils } from \"../../utils/Utils\";\r\n\r\nexport interface CustomHierarchyRectangularNode<TreeMapInputData>\r\n  extends HierarchyRectangularNode<TreeMapInputData> {\r\n  customId: number;\r\n}\r\n\r\nclass TreeMap<TreeMapInputData> extends React.Component<\r\n  ITreeMapProps<TreeMapInputData>,\r\n  ITreeMapState<TreeMapInputData>\r\n> {\r\n  // Default Props values\r\n  public static defaultProps: ITreeMapProps<{}> = {\r\n    id: \"myTreeMap\",\r\n    data: null,\r\n    height: 600,\r\n    width: 600,\r\n    valueFormat: \",d\",\r\n    valueUnit: \"MB\",\r\n    disableBreadcrumb: false,\r\n    colorModel: ColorModel.OneEachChildren,\r\n    paddingInner: 0,\r\n    customD3ColorScale: scaleSequential(interpolateSpectral),\r\n    namePropInData: \"name\",\r\n    linkPropInData: \"link\",\r\n    valuePropInData: \"value\", // can be value, count, ...\r\n    childrenPropInData: \"children\",\r\n    numberOfChildrenPlacement: NumberOfChildrenPlacement.BottomRight,\r\n  };\r\n\r\n  // Note. This treemap element initially was using treemap and hierarchy directly on the render.\r\n  //       I noticed a performance problem when the original data \"this.props.data\" has more than 1500 elements.\r\n  //       Now, the component is designed to show only the first level of nodes and when click on one expand the rest.\r\n  private _treemap: TreemapLayout<TreeMapInputData>;\r\n  private _rootData: HierarchyRectangularNode<TreeMapInputData>;\r\n  private _nodes: Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n  private _valueFormatFunction: (n: number) => string;\r\n  private _nodesbgColorFunction: ScaleSequential<string>;\r\n\r\n  constructor(props: ITreeMapProps<TreeMapInputData>) {\r\n    super(props);\r\n\r\n    const { width, height, data, namePropInData } = props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    // Default State values\r\n    this.state = {\r\n      height,\r\n      width,\r\n      data,\r\n      xScaleFactor: 1,\r\n      yScaleFactor: 1,\r\n      xScaleFunction: scaleLinear().range([0, width]),\r\n      yScaleFunction: scaleLinear().range([0, height]),\r\n      zoomEnabled: false,\r\n      // TODO: Replace data.name by id\r\n      breadcrumbItems: [\r\n        {\r\n          text: data[namePropInData],\r\n          key: 0,\r\n        },\r\n      ],\r\n      selectedId: 0,\r\n      selectedNode: this._treemap(\r\n        this._rootData\r\n      ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      totalNodes: this._nodes.length,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    const { onTreeMapDidMount } = this.props;\r\n    this._zoomTo(0);\r\n    if (onTreeMapDidMount) {\r\n      onTreeMapDidMount(this);\r\n    }\r\n  }\r\n\r\n  public UNSAFE_componentWillReceiveProps(\r\n    nextProps: ITreeMapProps<TreeMapInputData>\r\n  ) {\r\n    const { width, height } = nextProps;\r\n    if (height !== this.props.height || width !== this.props.width) {\r\n      this.setState({\r\n        width,\r\n        height,\r\n        xScaleFunction: scaleLinear().range([0, width]),\r\n        yScaleFunction: scaleLinear().range([0, height]),\r\n        selectedNode: this._treemap(\r\n          this._rootData\r\n        ) as CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    const { width, height, breadcrumbItems, selectedNode, data } = this.state;\r\n\r\n    const {\r\n      svgClassName,\r\n      svgStyle,\r\n      className,\r\n      childrenPropInData,\r\n      breadCrumbClassName,\r\n      disableBreadcrumb,\r\n    } = this.props;\r\n\r\n    this._createD3TreeMap(width, height, data);\r\n\r\n    let reactNodes: Array<React.ReactNode> = [];\r\n    const maxLevel = 1;\r\n    const iterateAllChildren = (\r\n      mainNode: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n      level: number\r\n    ) => {\r\n      reactNodes = reactNodes.concat(this._getNode(mainNode));\r\n      if (level < maxLevel) {\r\n        if (\r\n          mainNode.hasOwnProperty(childrenPropInData) &&\r\n          mainNode[childrenPropInData].length > 0\r\n        ) {\r\n          mainNode[childrenPropInData].forEach((element) => {\r\n            iterateAllChildren(element, level + 1);\r\n          });\r\n        }\r\n      }\r\n    };\r\n    iterateAllChildren(selectedNode, 0);\r\n\r\n    return (\r\n      <div className={className}>\r\n        {disableBreadcrumb === false ? (\r\n          <Breadcrumb items={breadcrumbItems} className={breadCrumbClassName} />\r\n        ) : null}\r\n        <svg\r\n          className={classnames(svgClassName)}\r\n          height={height}\r\n          width={width}\r\n          style={{ ...svgStyle }}\r\n        >\r\n          {reactNodes}\r\n        </svg>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _createD3TreeMap(\r\n    width: number,\r\n    height: number,\r\n    data: TreeMapInputData\r\n  ) {\r\n    const {\r\n      valuePropInData,\r\n      childrenPropInData,\r\n      paddingInner,\r\n      valueFormat,\r\n      colorModel,\r\n      customD3ColorScale,\r\n    } = this.props;\r\n\r\n    // 1. Create treemap structure\r\n    this._treemap = treemap<TreeMapInputData>()\r\n      .size([width, height])\r\n      .tile(treemapSquarify)\r\n      .paddingOuter(3)\r\n      .paddingTop(19)\r\n      .paddingInner(paddingInner)\r\n      .round(true);\r\n\r\n    // 2. Before compute a hierarchical layout, we need a root node\r\n    //    If the data is in JSON we use d3.hierarchy\r\n    this._rootData = hierarchy(data)\r\n      .sum((s) => s[valuePropInData])\r\n      .sort(\r\n        (a, b) => b.height - a.height || b[valuePropInData] - a[valuePropInData]\r\n      ) as HierarchyRectangularNode<TreeMapInputData>;\r\n\r\n    // 3. Get array of nodes\r\n    let numberItemId = 0;\r\n    this._nodes = this._treemap(this._rootData)\r\n      .each((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        item.customId = numberItemId++;\r\n      })\r\n      .descendants() as Array<CustomHierarchyRectangularNode<TreeMapInputData>>;\r\n\r\n    // Format function\r\n    this._valueFormatFunction = format(valueFormat);\r\n\r\n    let d: [number | { valueOf(): number }, number | { valueOf(): number }];\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        d = [0, Utils.getDepth<TreeMapInputData>(data, childrenPropInData) - 1];\r\n        break;\r\n      case ColorModel.Value:\r\n        d = extent(this._nodes, (n) => {\r\n          if (n.parent !== null) {\r\n            return n[valuePropInData];\r\n          }\r\n        });\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        d = extent(this._nodes, (n) =>\r\n          n.parent !== null ? n.descendants().length : 1\r\n        );\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        d = [data[childrenPropInData] ? data[childrenPropInData].length : 0, 0];\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    this._nodesbgColorFunction = customD3ColorScale.domain(d);\r\n  }\r\n\r\n  private _getNode(node: CustomHierarchyRectangularNode<TreeMapInputData>) {\r\n    const {\r\n      id: treemapId,\r\n      valueUnit,\r\n      hideValue,\r\n      hideNumberOfChildren,\r\n      nodeStyle,\r\n      nodeClassName,\r\n      valuePropInData,\r\n      childrenPropInData,\r\n      namePropInData,\r\n      linkPropInData,\r\n      numberOfChildrenPlacement,\r\n    } = this.props;\r\n\r\n    const {\r\n      totalNodes,\r\n      selectedId,\r\n      xScaleFactor,\r\n      xScaleFunction,\r\n      yScaleFactor,\r\n      yScaleFunction,\r\n      zoomEnabled,\r\n    } = this.state;\r\n\r\n    const { customId, data, x0, x1, y0, y1 } = node;\r\n\r\n    const name = data[namePropInData];\r\n    const url = data[linkPropInData];\r\n    const nodeClassNameFromData = data[\"className\"];\r\n\r\n    const hasChildren =\r\n      node[childrenPropInData] && node[childrenPropInData].length > 0\r\n        ? true\r\n        : false;\r\n    const formattedValue = `(${this._valueFormatFunction(\r\n      node[valuePropInData]\r\n    )} ${valueUnit})`;\r\n\r\n    const nodeTotalNodes = node.descendants().length - 1;\r\n\r\n    const { bgColor, textColor } = this._getColorsFromNode(\r\n      node,\r\n      nodeTotalNodes\r\n    );\r\n\r\n    const isSelectedNode = customId === selectedId;\r\n\r\n    return (\r\n      <Node\r\n        bgColor={bgColor}\r\n        className={classnames(nodeClassName, nodeClassNameFromData)}\r\n        style={{\r\n          fontVariant: \"normal\",\r\n          fontWeight: \"normal\",\r\n          fontSize: 14,\r\n          fontFamily: \"Arial\",\r\n          ...nodeStyle,\r\n        }}\r\n        globalTotalNodes={totalNodes}\r\n        hasChildren={hasChildren}\r\n        hideNumberOfChildren={hideNumberOfChildren}\r\n        id={customId}\r\n        isSelectedNode={isSelectedNode}\r\n        key={customId}\r\n        label={name}\r\n        name={name}\r\n        nodeTotalNodes={nodeTotalNodes}\r\n        onClick={!isSelectedNode ? this._onNodeClick : undefined}\r\n        textColor={textColor}\r\n        treemapId={treemapId}\r\n        url={url}\r\n        value={!hideValue && formattedValue}\r\n        x0={x0}\r\n        x1={x1}\r\n        xScaleFactor={xScaleFactor}\r\n        xScaleFunction={xScaleFunction}\r\n        y0={y0}\r\n        y1={y1}\r\n        yScaleFactor={yScaleFactor}\r\n        yScaleFunction={yScaleFunction}\r\n        zoomEnabled={zoomEnabled}\r\n        numberOfChildrenPlacement={numberOfChildrenPlacement}\r\n      />\r\n    );\r\n  }\r\n\r\n  private _onBreadcrumbItemClicked = (ev: React.MouseEvent<HTMLElement>) => {\r\n    this._zoomTo(Number(ev.currentTarget.id));\r\n  };\r\n\r\n  private _onNodeClick = (ev: React.MouseEvent<SVGElement>) => {\r\n    this._zoomTo(parseInt(ev.currentTarget.id));\r\n  };\r\n\r\n  private _getColorsFromNode(\r\n    node: CustomHierarchyRectangularNode<TreeMapInputData>,\r\n    nodeTotalNodes: number\r\n  ) {\r\n    const { colorModel, valuePropInData } = this.props;\r\n\r\n    let backgroundColor;\r\n    switch (colorModel) {\r\n      case ColorModel.Depth:\r\n        backgroundColor = this._nodesbgColorFunction(node.depth);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n        break;\r\n      case ColorModel.Value:\r\n        backgroundColor = this._nodesbgColorFunction(node[valuePropInData]);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.NumberOfChildren:\r\n        backgroundColor = this._nodesbgColorFunction(nodeTotalNodes);\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(1);\r\n        }\r\n        break;\r\n      case ColorModel.OneEachChildren:\r\n        const originalBackgroundColor = this._nodesbgColorFunction(\r\n          Utils.getTopSubParent<TreeMapInputData>(node)\r\n        );\r\n        if (node.depth > 1) {\r\n          backgroundColor = scaleLinear<string>()\r\n            .domain([0, node && node.children ? node.children.length : 0])\r\n            .interpolate(interpolateHcl)\r\n            .range([\"white\", originalBackgroundColor])(\r\n            Utils.getTopSubParent<TreeMapInputData>(node)\r\n          );\r\n        } else {\r\n          backgroundColor = originalBackgroundColor;\r\n        }\r\n        if (node.parent === null) {\r\n          backgroundColor = this._nodesbgColorFunction(0);\r\n        }\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return {\r\n      bgColor: backgroundColor,\r\n      textColor: Utils.getHighContrastColorFromString(backgroundColor),\r\n    };\r\n  }\r\n\r\n  private _zoomTo(nodeId: number) {\r\n    const { xScaleFunction, yScaleFunction, width, height } = this.state;\r\n\r\n    const { onZoom } = this.props;\r\n\r\n    const currentNode = this._nodes\r\n      .filter((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        return item.customId.toString() === nodeId.toString();\r\n      })\r\n      .pop();\r\n    if (currentNode) {\r\n      const x = currentNode.x0;\r\n      const y = currentNode.y0;\r\n      const dx = currentNode.x1 - currentNode.x0;\r\n      const dy = currentNode.y1 - currentNode.y0;\r\n      const xScaleFactor = width / dx;\r\n      const yScaleFactor = height / dy;\r\n      const breadcrumbItems = this._treemap(this._rootData)\r\n        .path(currentNode)\r\n        .map(\r\n          ({\r\n            data,\r\n            customId,\r\n          }: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n            return {\r\n              text: data[\"name\"],\r\n              key: customId,\r\n              onClick:\r\n                customId !== nodeId ? this._onBreadcrumbItemClicked : undefined,\r\n            };\r\n          }\r\n        );\r\n      if (onZoom) {\r\n        onZoom(currentNode.depth, nodeId, breadcrumbItems);\r\n      }\r\n      this.setState({\r\n        xScaleFactor,\r\n        yScaleFactor,\r\n        xScaleFunction: xScaleFunction.domain([x, x + dx]),\r\n        yScaleFunction: yScaleFunction.domain([y, y + dy]),\r\n        zoomEnabled: currentNode.parent === null ? false : true,\r\n        selectedId: nodeId,\r\n        selectedNode: currentNode,\r\n        breadcrumbItems,\r\n      });\r\n    } else {\r\n      console.warn(\"No node found for \" + nodeId);\r\n    }\r\n  }\r\n\r\n  public resetZoom() {\r\n    this._zoomTo(0);\r\n  }\r\n\r\n  public zoomOut() {\r\n    const { selectedId } = this.state;\r\n    const selectedNode = this._nodes\r\n      .filter((item: CustomHierarchyRectangularNode<TreeMapInputData>) => {\r\n        return item.customId === selectedId;\r\n      })\r\n      .pop();\r\n    if (\r\n      selectedNode &&\r\n      selectedNode.parent &&\r\n      selectedNode.parent.customId !== undefined\r\n    ) {\r\n      this._zoomTo(selectedNode.parent.customId);\r\n    }\r\n  }\r\n\r\n  public getZoomLevel() {\r\n    const { selectedNode } = this.state;\r\n    return selectedNode.depth;\r\n  }\r\n}\r\n\r\nexport default TreeMap;\r\n","export { default } from \"./TreeMap\"\nexport { ITreeMapProps, ColorModel } from \"./ITreeMapProps\""],"sourceRoot":""}